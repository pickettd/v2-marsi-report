webpackJsonp([0],{

/***/ 120:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return InspectionListPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__inspectioncreator_inspectioncreator__ = __webpack_require__(228);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_auth_service__ = __webpack_require__(27);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\nvar InspectionListPage = (function () {\n    function InspectionListPage(navCtrl, dataProvider, auth, loadingCtrl) {\n        this.navCtrl = navCtrl;\n        this.dataProvider = dataProvider;\n        this.auth = auth;\n        this.loadingCtrl = loadingCtrl;\n    }\n    InspectionListPage.prototype.ionViewDidLoad = function () {\n        var _this = this;\n        this.loading = this.loadingCtrl.create({\n            content: 'Please wait...'\n        });\n        this.loading.present();\n        this.dataProvider.initDB(this.auth.currentUser.username, this.auth.currentUser.credential)\n            .then(function (result) {\n            _this.loading.dismiss();\n            _this.dataProvider.getAllUnits(_this.auth.currentUser.username);\n        });\n    };\n    InspectionListPage.prototype.showInspectionCreatorPage = function (unit) {\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_2__inspectioncreator_inspectioncreator__[\"a\" /* InspectionCreatorPage */], { unit: unit }, { animate: true, direction: 'forward' });\n    };\n    return InspectionListPage;\n}());\nInspectionListPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-inspection',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/inspectionlist/inspectionlist.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main\">\\n  <ion-grid>\\n    <ion-row class=\"page-nav\">\\n      <ion-col col-6>\\n        <h2 class=\"page-header\">Inspection</h2>\\n        <p class=\"negative-margin\" *ngIf=\"dataProvider.allUnits.data.length > 0\">Choose the property to start an inspection.</p>\\n        <p class=\"negative-margin\" *ngIf=\"(dataProvider.allUnits.data.length === 0) && dataProvider.emptyUnitList\">\\n          Add a unit on the admin page to get started.\\n        </p>\\n      </ion-col>\\n      <ion-col col-6 class=\"text-align-left\">\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col *ngIf=\"dataProvider.allUnits.data.length > 0\">\\n        <ion-list no-lines>\\n          <ion-list-header>\\n            <div class=\"list-header\" item-left>\\n              Property\\n            </div>\\n            <!--<div class=\"list-header\" item-right>\\n              Last Inspection\\n            </div>-->\\n          </ion-list-header>\\n          <button *ngFor=\"let unit of dataProvider.allUnits.data\"\\n                  ion-item\\n                  (click)=\"showInspectionCreatorPage(unit)\">\\n\\n            <div class=\"item-note\" item-left>\\n              {{unit.name}}\\n            </div>\\n            <!--<div class=\"item-note\" item-right>\\n              Feb. 10th\\n            </div>-->\\n          </button>\\n        </ion-list>\\n      </ion-col>\\n      <ion-col *ngIf=\"(dataProvider.allUnits.data.length === 0) && !dataProvider.emptyUnitList\">\\n        <ion-spinner></ion-spinner>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/inspectionlist/inspectionlist.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_3__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_4__providers_auth_service__[\"a\" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"f\" /* LoadingController */]])\n], InspectionListPage);\n\n//# sourceMappingURL=inspectionlist.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/inspectionlist/inspectionlist.ts\n// module id = 120\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/inspectionlist/inspectionlist.ts");

/***/ }),

/***/ 122:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DropboxProvider; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_map__ = __webpack_require__(227);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_dropbox__ = __webpack_require__(462);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_dropbox___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_dropbox__);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nvar DropboxProvider = (function () {\n    function DropboxProvider(http) {\n        this.http = http;\n        this.dbx = null;\n        this.userPath = '';\n    }\n    DropboxProvider.prototype.setAccessToken = function (token, userpath) {\n        this.userPath = userpath;\n        this.dbx = new __WEBPACK_IMPORTED_MODULE_3_dropbox___default.a({ accessToken: token });\n    };\n    DropboxProvider.prototype.upload = function (name, file, location) {\n        var pathWithUser = '/' + this.userPath + location;\n        return this.dbx.filesUpload({ path: pathWithUser + '/' + name, contents: file })\n            .then(function (response) {\n            console.log('File uploaded!');\n            return response;\n        })\n            .catch(function (error) {\n            console.error(error);\n            return null;\n        });\n    };\n    ;\n    DropboxProvider.prototype.createShareLink = function (path) {\n        var pathWithUser = '/' + this.userPath + path;\n        return this.dbx.sharingCreateSharedLink({ path: pathWithUser, pending_upload: { '.tag': 'file' } })\n            .then(function (response) {\n            console.log('Link created! Url is ' + response.url);\n            return response;\n        })\n            .catch(function (error) {\n            console.error(error);\n            return null;\n        });\n    };\n    ;\n    // This SDK function provides Dropbox with a path to an image and a desired thumbnail size. Dropbox returns a fileblob of that thumbnail\n    // Docs are at http://dropbox.github.io/dropbox-sdk-js/Dropbox.html#filesGetThumbnail__anchor\n    // Possible sizes are: 'w32h32' | 'w64h64' | 'w128h128' | 'w640h480' | 'w1024h768'\n    DropboxProvider.prototype.filesGetThumbnail = function (path, sizeTag) {\n        var pathWithUser = '/' + this.userPath + path;\n        return this.dbx.filesGetThumbnail({ path: pathWithUser, size: { '.tag': sizeTag } })\n            .then(function (response) {\n            console.log('Link created! Url is ' + response.url);\n            return response;\n        })\n            .catch(function (error) {\n            console.error(error);\n            return null;\n        });\n    };\n    ;\n    return DropboxProvider;\n}());\nDropboxProvider = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"])(),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1__angular_http__[\"b\" /* Http */]])\n], DropboxProvider);\n\n//# sourceMappingURL=dropbox.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/providers/dropbox/dropbox.ts\n// module id = 122\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/providers/dropbox/dropbox.ts");

/***/ }),

/***/ 131:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return propertyReporting; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reportlist_reportlist__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__popoverinsdate_popoverinsdate__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__providers_auth_service__ = __webpack_require__(27);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\n\nvar propertyReporting = (function () {\n    function propertyReporting(navCtrl, popoverCtrl, dataProvider, auth) {\n        this.navCtrl = navCtrl;\n        this.popoverCtrl = popoverCtrl;\n        this.dataProvider = dataProvider;\n        this.auth = auth;\n        this.allUnits = this.dataProvider.allUnits;\n        this.allReportsByUnit = null;\n    }\n    propertyReporting.prototype.showReportListPage = function (unit) {\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_2__reportlist_reportlist__[\"a\" /* ReportListPage */], { unit: unit }, { animate: true, direction: 'forward' });\n    };\n    propertyReporting.prototype.ionViewDidLoad = function () {\n        var _this = this;\n        this.dataProvider.initDB(this.auth.currentUser.username, this.auth.currentUser.credential)\n            .then(function (result) {\n            _this.dataProvider.getAllUnits(_this.auth.currentUser.username)\n                .then(function (result) {\n                _this.allReportsByUnit = null;\n                _this.dataProvider.getAllReportsByUnit()\n                    .then(function (resultReport) {\n                    _this.allReportsByUnit = resultReport;\n                });\n            });\n        });\n    };\n    propertyReporting.prototype.getReportDateFromUnit = function (unit) {\n        var report = this.allReportsByUnit[unit._id];\n        if (!report) {\n            return '';\n        }\n        else {\n            var reportID = report._id;\n            var month = new Array();\n            month[0] = \"Jan\";\n            month[1] = \"Feb\";\n            month[2] = \"Mar\";\n            month[3] = \"Apr\";\n            month[4] = \"May\";\n            month[5] = \"Jun\";\n            month[6] = \"Jul\";\n            month[7] = \"Aug\";\n            month[8] = \"Sep\";\n            month[9] = \"Oct\";\n            month[10] = \"Nov\";\n            month[11] = \"Dec\";\n            var dateObj = new Date(parseInt(reportID.split('/Report')[1].trim()));\n            return month[dateObj.getMonth()] + ' ' + dateObj.getDate() + ', ' + dateObj.getFullYear();\n        }\n    };\n    propertyReporting.prototype.getProjectTotalsFromUnit = function (unit) {\n        var report = this.allReportsByUnit[unit._id];\n        if (!report || !report.projObjDict) {\n            return '';\n        }\n        else {\n            var projectsLowTotal = 0;\n            var projectsHighTotal = 0;\n            var projKeys = Object.keys(report.projObjDict);\n            for (var index = 0, len = projKeys.length; index < len; index++) {\n                var thisProj = report.projObjDict[projKeys[index]];\n                if (!thisProj.removeMe && thisProj.estimate) {\n                    projectsLowTotal += thisProj.estimate.lower;\n                    projectsHighTotal += thisProj.estimate.upper;\n                }\n            }\n            return '$' + projectsLowTotal + '-' + '$' + projectsHighTotal;\n        }\n    };\n    propertyReporting.prototype.getFlaggedTotalsFromUnit = function (unit) {\n        var report = this.allReportsByUnit[unit._id];\n        if (!report) {\n            return '';\n        }\n        else if (!report.flagCount) {\n            return '0';\n        }\n        else {\n            return report.flagCount;\n        }\n    };\n    propertyReporting.prototype.getScoreFromUnit = function (unit) {\n        var report = this.allReportsByUnit[unit._id];\n        if (!report || !report.scoreString) {\n            return '';\n        }\n        else {\n            return report.scoreString;\n        }\n    };\n    propertyReporting.prototype.openPopover = function (myEvent) {\n        var popover = this.popoverCtrl.create(__WEBPACK_IMPORTED_MODULE_3__popoverinsdate_popoverinsdate__[\"a\" /* PopoverinsdatePage */]);\n        popover.present({\n            ev: myEvent\n        });\n    };\n    return propertyReporting;\n}());\npropertyReporting = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-propertyreporting',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/propertyreporting/propertyreporting.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main\">\\n  <ion-grid>\\n    <ion-row class=\"page-nav\">\\n      <ion-col>\\n        <h2 class=\"page-header\">Reporting</h2>\\n        <p class=\"negative-margin\">Choose the unit to view latest data or start a new owner\\'s report. <strong>Only data from reports that have been started appear on this page</strong>.</p>\\n      </ion-col>\\n    </ion-row>\\n    <div class=\"reporting-selection\">\\n    <ion-row>\\n      <ion-col>\\n        <div class=\"list-header\" item-left>\\n          Unit\\n        </div>\\n      </ion-col>\\n      <ion-col>\\n        <div class=\"list-header\" item-left>\\n          Type\\n        </div>\\n      </ion-col>\\n      <ion-col>\\n        <div class=\"list-header\" item-left>\\n          Report Date\\n        </div>\\n      </ion-col>\\n      <ion-col>\\n        <div class=\"list-header\" item-left>\\n          Projects Total\\n        </div>\\n      </ion-col>\\n      <ion-col>\\n        <div class=\"list-header\" item-left>\\n          Flagged\\n        </div>\\n      </ion-col>\\n      <ion-col>\\n        <div class=\"list-header\" item-left>\\n          Hospitality Score\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngFor=\"let unit of allUnits.data\"\\n             tappable\\n             (click)=\"showReportListPage(unit)\">\\n      <ion-col>\\n        <p>\\n          {{unit.name}}\\n        </p>\\n      </ion-col>\\n      <ion-col>\\n        <p>\\n          {{unit.unitTemplate.displayName}}\\n        </p>\\n      </ion-col>\\n      <ion-col>\\n        <p *ngIf=\"allReportsByUnit && allReportsByUnit[unit._id]\">\\n          {{getReportDateFromUnit(unit)}}\\n        </p>\\n        <p *ngIf=\"allReportsByUnit && !allReportsByUnit[unit._id]\">\\n          Report not started\\n        </p>\\n      </ion-col>\\n      <ion-col>\\n        <p *ngIf=\"allReportsByUnit\">\\n          {{getProjectTotalsFromUnit(unit)}}\\n        </p>\\n      </ion-col>\\n      <ion-col>\\n        <p *ngIf=\"allReportsByUnit\">\\n          {{getFlaggedTotalsFromUnit(unit)}}\\n        </p>\\n      </ion-col>\\n      <ion-col>\\n        <p *ngIf=\"allReportsByUnit\">\\n          {{getScoreFromUnit(unit)}}\\n        </p>\\n      </ion-col>\\n    </ion-row>\\n  </div>\\n  </ion-grid>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/propertyreporting/propertyreporting.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"k\" /* PopoverController */], __WEBPACK_IMPORTED_MODULE_4__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_5__providers_auth_service__[\"a\" /* AuthService */]])\n], propertyReporting);\n\n//# sourceMappingURL=propertyreporting.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/propertyreporting/propertyreporting.ts\n// module id = 131\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/propertyreporting/propertyreporting.ts");

/***/ }),

/***/ 132:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ReportCreatorPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(236);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ng2_charts__ = __webpack_require__(262);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ng2_charts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_ng2_charts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__reportlist_reportlist__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__print_print__ = __webpack_require__(379);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__popoverinsdate_popoverinsdate__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__providers_auth_service__ = __webpack_require__(27);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\n\n\n\n\nvar ReportCreatorPage = (function () {\n    function ReportCreatorPage(navCtrl, popoverCtrl, navParams, dataProvider, cdRef, toast, auth) {\n        this.navCtrl = navCtrl;\n        this.popoverCtrl = popoverCtrl;\n        this.navParams = navParams;\n        this.dataProvider = dataProvider;\n        this.cdRef = cdRef;\n        this.toast = toast;\n        this.auth = auth;\n        // In case the page is opened without a unit provided to the router\n        this.unit = {\n            _id: '',\n            name: ''\n        };\n        this.doughnutChartSettings = {\n            options: {\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                },\n                cutoutPercentage: \"75\"\n            }\n        };\n        this.ownerReport = { roomObjList: [], projObjList: [], victoriesList: [], failuresList: [] };\n        this.prevOwnerReport = {};\n        this.roomList = [];\n        this.showSavePopup = false;\n        this.reportFlags = {};\n    }\n    ReportCreatorPage.prototype.ionViewDidLoad = function () {\n        var _this = this;\n        this.doneLoading = false;\n        var unit = this.navParams.get('unit');\n        if ((typeof (unit) !== 'undefined') && (typeof (unit._id) !== 'undefined')) {\n            this.unit = unit;\n        }\n        // Note that the code to load the owner report from the db has to come after reset builder (see below) because it relies on the empty\n        // structure of the report room list already existing\n        this.resetBuilder();\n        var navToRoomID = this.navParams.get('roomID');\n        if (typeof (navToRoomID) !== 'undefined') {\n            this.roomID = navToRoomID;\n            if (this.roomID === 'PROJECTS') {\n                this.selectedRoomIndex = this.roomList.length - 1;\n                console.log('going to projects');\n                this.roomList.forEach(function (room, index) {\n                    _this.completedIndices[index] = true;\n                });\n            }\n        }\n        else {\n            this.roomID = this.roomList[0];\n        }\n        var ownerReport = this.navParams.get('ownerReport');\n        if ((typeof (ownerReport) !== 'undefined') && (ownerReport !== null)) {\n            this.ownerReport = ownerReport;\n            if (this.ownerReport.roomObjList[this.selectedRoomIndex]) {\n                this.selectedPictures = this.ownerReport.roomObjList[this.selectedRoomIndex].selectedPicObjs;\n            }\n            this.doneLoading = true;\n        }\n        else {\n            // Note that this code (load the owner report) has to come after reset builder (see above) because it relies on the empty\n            // structure of the report room list already existing\n            // In the case that a report object isn't already in memory - read from the db and parse the objects into arrays and properties\n            this.dataProvider.getOwnerReport(this.dataProvider.inspectionData._id)\n                .then(function (reportObjFromDB) {\n                // This handles the report's per-room data (room summary and pictures)\n                // You can see here how the load code relies on the report structure already being in place (created by resetbuilder)\n                _this.ownerReport.roomObjList.forEach(function (roomObj, roomIndex) {\n                    var roomID = roomObj.name;\n                    if (_this.dataProvider.roomStructure[roomID] && _this.dataProvider.roomStructure[roomID].data) {\n                        if (reportObjFromDB[roomID]) {\n                            // Handle each room summary\n                            if (reportObjFromDB[roomID].summary) {\n                                _this.ownerReport.roomObjList[roomIndex].summary = reportObjFromDB[roomID].summary;\n                            }\n                            // Handle the pictures for each room\n                            if (reportObjFromDB[roomID].picsObjDict) {\n                                var picIDs = Object.keys(reportObjFromDB[roomID].picsObjDict);\n                                var picLength = picIDs.length;\n                                if (picLength) {\n                                    _this.ownerReport.roomObjList[roomIndex].selectedPicObjs.splice(0);\n                                }\n                                for (var index = 0; index < picLength; index++) {\n                                    var thisPic = reportObjFromDB[roomID].picsObjDict[picIDs[index]];\n                                    _this.ownerReport.roomObjList[roomIndex].selectedPicObjs.push(thisPic);\n                                }\n                            }\n                        }\n                    }\n                });\n                // Then set the local selected pics based on the loaded report\n                if (_this.ownerReport.roomObjList[_this.selectedRoomIndex]) {\n                    _this.selectedPictures = _this.ownerReport.roomObjList[_this.selectedRoomIndex].selectedPicObjs;\n                }\n                // This handles the overall summary\n                if (reportObjFromDB.unitSummary) {\n                    _this.ownerReport.unitSummary = reportObjFromDB.unitSummary;\n                }\n                // Handle the victory list\n                if (reportObjFromDB['victoryObjDict']) {\n                    var victIDs = Object.keys(reportObjFromDB['victoryObjDict']);\n                    var victLength = victIDs.length;\n                    if (victLength) {\n                        _this.ownerReport.victoriesList.splice(0);\n                    }\n                    for (var index = 0; index < victLength; index++) {\n                        var thisVict = reportObjFromDB['victoryObjDict'][victIDs[index]];\n                        _this.ownerReport.victoriesList.push(thisVict);\n                    }\n                }\n                // Handle the failure list\n                if (reportObjFromDB['failureObjDict']) {\n                    var failIDs = Object.keys(reportObjFromDB['failureObjDict']);\n                    var failLength = failIDs.length;\n                    if (failLength) {\n                        _this.ownerReport.failuresList.splice(0);\n                    }\n                    for (var index = 0; index < failLength; index++) {\n                        var thisFail = reportObjFromDB['failureObjDict'][failIDs[index]];\n                        _this.ownerReport.failuresList.push(thisFail);\n                    }\n                }\n                // Handle the project list\n                if (reportObjFromDB['projObjDict']) {\n                    var projIDs = Object.keys(reportObjFromDB['projObjDict']);\n                    var projLength = projIDs.length;\n                    if (projLength) {\n                        _this.ownerReport.projObjList.splice(0);\n                    }\n                    for (var index = 0; index < projLength; index++) {\n                        var thisProj = reportObjFromDB['projObjDict'][projIDs[index]];\n                        _this.ownerReport.projObjList.push(thisProj);\n                    }\n                }\n                _this.prevOwnerReport = JSON.parse(JSON.stringify(reportObjFromDB));\n                _this.doneLoading = true;\n            })\n                .catch(function () {\n                _this.doneLoading = true;\n            });\n        }\n    };\n    ReportCreatorPage.prototype.resetBuilder = function () {\n        var timestampNow = new Date().getTime();\n        this.ownerReport.unitName = this.unit.name;\n        this.ownerReport.unitSummary = '';\n        this.prevOwnerReport = {};\n        this.ownerReport.roomObjList.splice(0);\n        this.ownerReport.projObjList.splice(0);\n        this.ownerReport.projObjList.push({\n            description: '',\n            estimate: { lower: 0, upper: 25000 },\n            _id: timestampNow,\n            removeMe: false\n        });\n        this.ownerReport.victoriesList.splice(0);\n        this.ownerReport.victoriesList.push({ text: '', _id: timestampNow, removeMe: false });\n        this.ownerReport.failuresList.splice(0);\n        this.ownerReport.failuresList.push({ text: '', _id: timestampNow, removeMe: false });\n        this.selectedRoomIndex = 0;\n        this.completedIndices = {};\n        this.selectedPictures = [];\n        this.roomList.splice(0);\n        for (var _i = 0, _a = this.dataProvider.inspectionTemplate.roomOrder; _i < _a.length; _i++) {\n            var room = _a[_i];\n            if (this.dataProvider.roomStructure[room] && this.dataProvider.roomStructure[room].data) {\n                var roomObj = { name: room, summary: '', selectedPicObjs: [] };\n                this.roomList.push(room);\n                this.ownerReport.roomObjList.push(roomObj);\n            }\n        }\n        this.roomList.push('UNIT SUMMARY');\n        this.roomList.push('PROJECTS');\n    };\n    ReportCreatorPage.prototype.sliderOnChange = function (event) {\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.addEmptyVictory = function () {\n        this.ownerReport.victoriesList.push({ text: '', _id: new Date().getTime(), removeMe: false });\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.removeVictory = function (index) {\n        this.ownerReport.victoriesList[index].removeMe = true;\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.addEmptyFailure = function () {\n        this.ownerReport.failuresList.push({ text: '', _id: new Date().getTime(), removeMe: false });\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.removeFailure = function (index) {\n        this.ownerReport.failuresList[index].removeMe = true;\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.addNewProject = function () {\n        this.ownerReport.projObjList.push({\n            description: '',\n            estimate: { lower: 0, upper: 25000 },\n            _id: new Date().getTime(),\n            removeMe: false\n        });\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.removeProject = function (index) {\n        this.ownerReport.projObjList[index].removeMe = true;\n        this.cdRef.detectChanges();\n    };\n    /**\n     * Allows pictures to be added and removed on click.\n     * Pictures are stored in this.selectedPictures.\n     * When pictures are removed their comments are wiped out.\n     * @param pic\n     */\n    ReportCreatorPage.prototype.togglePicture = function (pic) {\n        var index = -1;\n        for (var i = 0; i < this.selectedPictures.length; i++) {\n            if (this.selectedPictures[i]._id === pic._id) {\n                index = i;\n                break;\n            }\n        }\n        if (index === -1) {\n            // Right now we need to push a copy because we're using pic objects across rooms.\n            // Since the demo pic objs are reused, can't use refs because comments persist.\n            // With real data connected then I think we'll be able to go back to just refs.\n            var picCopy = __assign({}, pic);\n            picCopy.removeMe = false;\n            this.selectedPictures.push(picCopy);\n        }\n        else {\n            // Handle the case of finding the pic but that it was previously removed\n            if (this.selectedPictures[index].removeMe) {\n                this.selectedPictures[index].removeMe = false;\n            }\n            else {\n                this.selectedPictures[index].removeMe = true;\n            }\n        }\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.pictureExists = function (pic) {\n        for (var i = 0; i < this.selectedPictures.length; i++) {\n            if ((this.selectedPictures[i]._id === pic._id) && (!this.selectedPictures[i].removeMe)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ReportCreatorPage.prototype.showReportPage = function () {\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_4__reportlist_reportlist__[\"a\" /* ReportListPage */], { unit: this.unit, ownerReport: this.ownerReport }, { animate: true, direction: 'backward' });\n    };\n    ReportCreatorPage.prototype.invokeSavePopup = function (roomIndex) {\n        var _this = this;\n        var roomID = this.roomList[roomIndex];\n        var toast = this.toast.create({\n            message: roomID + ' was saved',\n            duration: 3000,\n            position: 'top',\n        });\n        this.dataProvider.saveOwnerReport(this.ownerReport, this.prevOwnerReport, this.dataProvider.inspectionData, this.auth.currentUser.username, roomID)\n            .then(function (resultDoc) {\n            __WEBPACK_IMPORTED_MODULE_0_lodash__[\"merge\"](_this.prevOwnerReport, resultDoc.reportDataDict);\n            toast.present();\n        });\n    };\n    ReportCreatorPage.prototype.clickIndex = function (roomIndex) {\n        var _this = this;\n        // Need to check this because unit summary / project aren't rooms in report-output\n        if (typeof (this.ownerReport.roomObjList[this.selectedRoomIndex]) !== 'undefined') {\n            this.ownerReport.roomObjList[this.selectedRoomIndex].selectedPicObjs = this.selectedPictures.slice();\n        }\n        // Have to call invoke save after the owner report pictures are copied above\n        this.invokeSavePopup(this.selectedRoomIndex);\n        this.completedIndices[this.selectedRoomIndex] = true;\n        this.roomID = this.roomList[roomIndex];\n        this.doneLoading = false;\n        this.selectedRoomIndex = roomIndex;\n        this.doneLoading = true;\n        if (this.roomList[roomIndex] !== 'UNIT SUMMARY' && this.roomList[roomIndex] !== 'PROJECTS') {\n            // Load previously selected pictures from the report-output into the builder\n            this.selectedPictures = this.ownerReport.roomObjList[this.selectedRoomIndex].selectedPicObjs;\n            if (this.slides) {\n                this.slides.slideTo(0, 0);\n            }\n            // We have the refresh the whole donut chart to see color changes (red, blue, or green depending on score).\n            // Not sure why setTimeout is used but allegedly required: https://github.com/valor-software/ng2-charts/issues/547\n            setTimeout(function () {\n                _this._chart.refresh();\n                _this.cdRef.detectChanges();\n            }, 0);\n        }\n        this.cdRef.detectChanges();\n    };\n    ReportCreatorPage.prototype.openPopover = function (myEvent) {\n        var popover = this.popoverCtrl.create(__WEBPACK_IMPORTED_MODULE_6__popoverinsdate_popoverinsdate__[\"a\" /* PopoverinsdatePage */]);\n        popover.present({\n            ev: myEvent\n        });\n    };\n    ReportCreatorPage.prototype.showPrintPage = function () {\n        this.invokeSavePopup(this.selectedRoomIndex);\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_5__print_print__[\"a\" /* PrintPage */], { ownerReport: this.ownerReport, unit: this.unit }, {\n            animate: true,\n            direction: 'forward'\n        });\n    };\n    return ReportCreatorPage;\n}());\n__decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ViewChild\"])(__WEBPACK_IMPORTED_MODULE_2_ng2_charts__[\"BaseChartDirective\"]),\n    __metadata(\"design:type\", Object)\n], ReportCreatorPage.prototype, \"_chart\", void 0);\n__decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ViewChild\"])(__WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"l\" /* Slides */]),\n    __metadata(\"design:type\", __WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"l\" /* Slides */])\n], ReportCreatorPage.prototype, \"slides\", void 0);\nReportCreatorPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Component\"])({\n        selector: 'page-reportcreator',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/reportcreator/reportcreator.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main\">\\n  <ion-grid *ngIf=\"doneLoading\">\\n    <ion-row class=\"page-nav\">\\n      <ion-col>\\n          <a (click)=\"showReportPage()\" class=\"clickable-element\">\\n        <h2 class=\"page-header\">{{unit.name}}\\n        </h2>\\n        <p class=\"negative-margin\"><ion-icon name=\"arrow-back\"></ion-icon> Data Details </p></a>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <!-- left column room list -->\\n      <ion-col col-12 col-md-2>\\n        <ion-list *ngIf=\"roomList.length\" class=\"report-builder\">\\n          <ng-container *ngFor=\"let room of roomList; let i = index;\">\\n            <p\\n              *ngIf=\"(room === \\'UNIT SUMMARY\\')||(room === \\'PROJECTS\\')||(dataProvider.roomStructure[room] && dataProvider.roomStructure[room].data)\"\\n              [ngClass]=\"{\\'completed\\': completedIndices[i], \\'current\\': i==selectedRoomIndex}\"\\n              [attr.color]=\"completedIndices[i] ? \\'secondary\\' : null\"\\n              (click)=\"clickIndex(i)\">\\n              <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[room]\">\\n                <ion-icon *ngIf=\"completedIndices[i]\"\\n                        name=\"checkmark-circle\"></ion-icon> {{dataProvider.inspectionTemplate.roomAliases[room]}}\\n              </span>\\n              <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[room]\">\\n                <ion-icon *ngIf=\"completedIndices[i]\"\\n                        name=\"checkmark-circle\"></ion-icon> {{room}}\\n              </span>\\n            </p>\\n          </ng-container>\\n        </ion-list>\\n      </ion-col>\\n      <ion-col col-12 col-md-1></ion-col>\\n      <!-- section for ROOM VIEW -->\\n      <ion-col *ngIf=\"(roomID !== \\'UNIT SUMMARY\\')&&(roomID !== \\'PROJECTS\\')\" col-12 col-md-6>\\n        <h2>\\n          <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[roomList[selectedRoomIndex]]\">\\n            {{dataProvider.inspectionTemplate.roomAliases[roomList[selectedRoomIndex]]}}\\n          </span>\\n          <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[roomList[selectedRoomIndex]]\">\\n            {{roomList[selectedRoomIndex]}}\\n          </span>\\n        </h2>\\n        <ng-container *ngIf=\"dataProvider.roomStructure[roomID].data.flagsList.length > 0\">\\n          <ion-icon name=\"flag\" style=\"color:red;\"></ion-icon>\\n          {{dataProvider.roomStructure[roomID].data.flagsList.join(\\', \\')}}\\n        </ng-container>\\n        <ion-label>Room Summary</ion-label>\\n        <ion-textarea type=\"text\" [(ngModel)]=\"ownerReport.roomObjList[selectedRoomIndex].summary\"></ion-textarea>\\n\\n        <ion-label>Add a picture to report</ion-label>\\n        <ion-slides *ngIf=\"dataProvider.roomStructure[roomID].data.itemPicObjs.length\" pager slidesPerView=\"3\" spaceBetween=\"5px\">\\n          <ng-container *ngFor=\"let itemPicObj of dataProvider.roomStructure[roomID].data.itemPicObjs\">\\n            <ion-slide *ngIf=\"dataProvider.inspectionData.data[roomID].data[itemPicObj.itemID].images[itemPicObj.picID].thumb400 && dataProvider.inspectionData.data[roomID].data[itemPicObj.itemID].images[itemPicObj.picID].thumb800\"\\n                       [ngClass]=\"{\\'selected\\': pictureExists(dataProvider.inspectionData.data[roomID].data[itemPicObj.itemID].images[itemPicObj.picID])}\">\\n              <span (click)=\"togglePicture(dataProvider.inspectionData.data[roomID].data[itemPicObj.itemID].images[itemPicObj.picID])\"\\n                     class=\"clickable-element\">\\n                <ion-icon *ngIf=\"pictureExists(dataProvider.inspectionData.data[roomID].data[itemPicObj.itemID].images[itemPicObj.picID])\"\\n                          name=\"checkmark-circle\"></ion-icon>\\n                <img width=\"100%\" height=\"auto\"\\n                    [src]=\"dataProvider.inspectionData.data[roomID].data[itemPicObj.itemID].images[itemPicObj.picID].thumb400\"/>\\n              </span>\\n            </ion-slide>\\n          </ng-container>\\n        </ion-slides>\\n        <div *ngIf=\"selectedPictures.length\">\\n          <ng-container *ngFor=\"let pic of selectedPictures\">\\n            <ion-row *ngIf=\"!pic.removeMe\">\\n              <ion-col col-sm-6><img width=\"100%\" height=\"auto\" [src]=\"pic.thumb400\"/></ion-col>\\n              <ion-col col-sm-6><ion-label>Picture Comments</ion-label><ion-textarea type=\"text\" [(ngModel)]=\"pic.comment\"></ion-textarea></ion-col>\\n            </ion-row>\\n          </ng-container>\\n        </div>\\n\\n        <ion-row>\\n          <ion-col>\\n            <button ion-button class=\"full\" color=\"secondary\" (click)=\"clickIndex(selectedRoomIndex+1)\">Save and Next</button>\\n          </ion-col>\\n        </ion-row>\\n      </ion-col>\\n      <!-- section for ROOM STATS CHART -->\\n      <ion-col *ngIf=\"(roomID !== \\'UNIT SUMMARY\\')&&(roomID !== \\'PROJECTS\\')\" col-12 col-md-2 offset-md-1\\n               class=\"donut-side\">\\n        <ion-row>\\n          <canvas baseChart\\n                  [data]=\"[(dataProvider.roomStructure[roomID].data.hospitalitySum / dataProvider.roomStructure[roomID].data.hospitalityCount),(10- (dataProvider.roomStructure[roomID].data.hospitalitySum / dataProvider.roomStructure[roomID].data.hospitalityCount))]\"\\n                  [chartType]=\"\\'doughnut\\'\"\\n                  [colors]=\"dataProvider.roomStructure[roomID].data.chartColors\"\\n                  [options]=\"doughnutChartSettings.options\"></canvas>\\n          <div class=\"inside-donut\">\\n            <h2>{{ dataProvider.roomStructure[roomID].data.hospitalityInt }}<span class=\"decimals\">{{ dataProvider.roomStructure[roomID].data.hospitalityRemainder }}</span>\\n              <span class=\"label\">Hospitality</span>\\n            </h2>\\n          </div>\\n        </ion-row>\\n        <ion-row>\\n          <h3>\\n            {{dataProvider.roomStructure[roomID].data.completedItemCount}} <span class=\"label\">Items Inspected</span>\\n          </h3>\\n        </ion-row>\\n        <ng-container *ngFor=\"let timelineID of dataProvider.issueStructure[\\'_keys\\']\">\\n          <ion-row *ngIf=\"dataProvider.roomStructure[roomID].data.issueTypeCounts[timelineID]\">\\n            <h3>{{dataProvider.roomStructure[roomID].data.issueTypeCounts[timelineID]}} <span class=\"label\">{{timelineID}}</span></h3>\\n          </ion-row>\\n        </ng-container>\\n      </ion-col>\\n      <!-- section for UNIT SUMMARY VIEW -->\\n      <ion-col *ngIf=\"(roomID === \\'UNIT SUMMARY\\')\" col-12 col-md-6>\\n        <h2>Unit Summary</h2>\\n        <ion-row>\\n          <ion-col>\\n            <ion-label>Victories</ion-label>\\n          </ion-col>\\n        </ion-row>\\n        <ng-container *ngFor=\"let victory of ownerReport.victoriesList; let i = index\">\\n          <ion-row *ngIf=\"!victory.removeMe\"\\n                   align-items-center justify-content-center>\\n            <ion-col col-1>\\n              <ion-icon name=\"medal\"></ion-icon>\\n            </ion-col>\\n            <ion-col col-10>\\n              <ion-input [(ngModel)]=\"victory.text\" type=\"text\" class=\"ios-padding\"></ion-input>\\n            </ion-col>\\n            <ion-col col-1>\\n              <ion-icon (click)=\"removeVictory(i)\" name=\"close\"></ion-icon>\\n            </ion-col>\\n          </ion-row>\\n        </ng-container>\\n        <ion-row>\\n          <ion-col col-1>\\n          </ion-col>\\n          <ion-col>\\n            <button ion-button (click)=\"addEmptyVictory()\">Add Victory</button>\\n          </ion-col>\\n        </ion-row>\\n        <ng-container *ngFor=\"let failure of ownerReport.failuresList; let i = index\">\\n          <ion-row *ngIf=\"!failure.removeMe\"\\n                   align-items-center justify-content-center>\\n            <ion-col col-1>\\n              <ion-icon name=\"warning\"></ion-icon>\\n            </ion-col>\\n            <ion-col col-10>\\n              <ion-input [(ngModel)]=\"failure.text\" type=\"text\" class=\"ios-padding\"></ion-input>\\n            </ion-col>\\n            <ion-col col-1>\\n              <ion-icon name=\"close\" (click)=\"removeFailure(i)\"></ion-icon>\\n            </ion-col>\\n          </ion-row>\\n        </ng-container>\\n        <ion-row>\\n          <ion-col col-1>\\n          </ion-col>\\n          <ion-col>\\n            <button ion-button (click)=\"addEmptyFailure()\">Add Quality Failure</button>\\n          </ion-col>\\n        </ion-row>\\n        <ion-row>\\n          <ion-col>\\n            <ion-label>Unit Summary</ion-label>\\n            <ion-textarea [(ngModel)]=\"ownerReport.unitSummary\" type=\"text\"></ion-textarea>\\n          </ion-col>\\n        </ion-row>\\n        <ion-row>\\n          <ion-col>\\n            <button ion-button class=\"full\" color=\"secondary\" (click)=\"clickIndex(selectedRoomIndex+1)\">Projects</button>\\n          </ion-col>\\n        </ion-row>\\n      </ion-col>\\n      <!-- section for PROJECTS VIEW -->\\n      <ion-col *ngIf=\"(roomID === \\'PROJECTS\\')\" col-12 col-md-6>\\n        <h2>Projects Worth Starting</h2>\\n        <!--<ng-container *ngIf=\"reportFlags[roomID.toUpperCase()].length > 0\">-->\\n        <ul *ngIf=\"dataProvider.issueStructure._flagsList.length > 0\"\\n            style=\"list-style: none;\">\\n          <li *ngFor=\"let flagItem of dataProvider.issueStructure._flagsList\">\\n            <ion-icon name=\"flag\" style=\"color:red;\"></ion-icon>\\n            {{flagItem}}\\n          </li>\\n        </ul>\\n        <ng-container *ngFor=\"let projObj of ownerReport.projObjList; let i = index\">\\n          <ng-container *ngIf=\"!projObj.removeMe\">\\n            <ion-row align-items-center justify-content-center>\\n              <ion-col col-1>\\n                <ion-icon name=\"hammer\"></ion-icon>\\n              </ion-col>\\n              <ion-col col-10>\\n                <ion-input [(ngModel)]=\"projObj.description\" type=\"text\" class=\"ios-padding\"></ion-input>\\n              </ion-col>\\n              <ion-col col-1>\\n                <ion-icon name=\"close\" (click)=\"removeProject(i)\"></ion-icon>\\n              </ion-col>\\n            </ion-row>\\n            <ion-row align-items-center justify-content-center>\\n              <ion-col col-1>\\n              </ion-col>\\n              <ion-col col-10>\\n                <ion-item>\\n                  <ion-range class=\"project-range\" min=\"0\" max=\"50000\" step=\"500\" pin=\"true\" dualKnobs=\"true\" [(ngModel)]=\"projObj.estimate\"\\n                             color=\"secondary\" (ionChange)=\"sliderOnChange($event)\" debounce=\"0\">\\n                    <ion-label range-left>$0</ion-label>\\n                    <ion-label range-right>$50,000</ion-label>\\n                    </ion-range>\\n                </ion-item>\\n              </ion-col>\\n              <ion-col col-1>\\n              </ion-col>\\n            </ion-row>\\n          </ng-container>\\n        </ng-container>\\n        <ion-row>\\n          <ion-col col-1>\\n          </ion-col>\\n          <ion-col>\\n            <button ion-button (click)=\"addNewProject()\">Add Project</button>\\n          </ion-col>\\n        </ion-row>\\n        <ion-row>\\n          <ion-col>\\n            <button class=\"full\" ion-button color=\"secondary\" (click)=\"showPrintPage()\">Print Report</button>\\n          </ion-col>\\n        </ion-row>\\n      </ion-col>\\n      <!-- section for UNIT SUMMARY/PROJECTS chart -->\\n      <ion-col *ngIf=\"(roomID === \\'UNIT SUMMARY\\')||(roomID === \\'PROJECTS\\')\" col-12 col-md-2 offset-md-1 class=\"donut-side\">\\n        <ion-row>\\n          <canvas baseChart\\n                  [data]=\"[(dataProvider.hospitalityStructure.sum / dataProvider.hospitalityStructure.count),(10- (dataProvider.hospitalityStructure.sum / dataProvider.hospitalityStructure.count))]\"\\n                  [chartType]=\"\\'doughnut\\'\"\\n                  [colors]=\"dataProvider.hospitalityStructure.chartColors\"\\n                  [options]=\"doughnutChartSettings.options\"></canvas>\\n          <div class=\"inside-donut\">\\n            <h2>\\n              {{ dataProvider.hospitalityStructure.intPortion }}<span class=\"decimals\">{{ dataProvider.hospitalityStructure.remainderPortion }}</span>\\n              <span class=\"label\">Hospitality</span>\\n            </h2>\\n          </div>\\n        </ion-row>\\n        <ion-row>\\n          <h3>\\n            {{dataProvider.issueStructure._itemsInspectedCount}} <span class=\"label\">Items Inspected</span>\\n          </h3>\\n        </ion-row>\\n        <ion-row>\\n          <h2 class=\"replacement-header\">Timeline</h2>\\n        </ion-row>\\n        <ion-row *ngFor=\"let issueID of dataProvider.issueStructure[\\'_keys\\']\">\\n          <h3>\\n            {{ dataProvider.issueStructure[issueID].count }} <span class=\"label\">{{issueID}}</span>\\n          </h3>\\n          <span class=\"timeline label\">{{ dataProvider.issueStructure[issueID].timelineText }}</span>\\n        </ion-row>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/reportcreator/reportcreator.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"k\" /* PopoverController */], __WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"i\" /* NavParams */],\n        __WEBPACK_IMPORTED_MODULE_7__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ChangeDetectorRef\"], __WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"m\" /* ToastController */], __WEBPACK_IMPORTED_MODULE_8__providers_auth_service__[\"a\" /* AuthService */]])\n], ReportCreatorPage);\n\n//# sourceMappingURL=reportcreator.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/reportcreator/reportcreator.ts\n// module id = 132\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/reportcreator/reportcreator.ts");

/***/ }),

/***/ 140:
/***/ (function(module, exports) {

eval("function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 140;\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 140\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/node_modules/@angular/core/@angular_lazy");

/***/ }),

/***/ 18:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Data; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_pouchdb__ = __webpack_require__(456);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(236);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dropbox_dropbox__ = __webpack_require__(122);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n/*\n  Generated class for the Data provider.\n\n  See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n  for more info on providers and Angular 2 DI.\n*/\nvar Data = (function () {\n    function Data(zone, dropbox) {\n        this.zone = zone;\n        this.dropbox = dropbox;\n        // This function is used to get a type/condition template object based on type and option ids\n        this.getOptionTemplateFromID = function (typeID, optionID) {\n            if (this.inspectionTemplate.typesConditions && this.inspectionTemplate.typesConditions[typeID]) {\n                for (var _i = 0, _a = this.inspectionTemplate.typesConditions[typeID].options; _i < _a.length; _i++) {\n                    var optionGroup = _a[_i];\n                    for (var _b = 0, optionGroup_1 = optionGroup; _b < optionGroup_1.length; _b++) {\n                        var option = optionGroup_1[_b];\n                        if (option.optionID === optionID) {\n                            return option;\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n        __WEBPACK_IMPORTED_MODULE_1_pouchdb__[\"a\" /* default */].plugin(__webpack_require__(477));\n        __WEBPACK_IMPORTED_MODULE_1_pouchdb__[\"a\" /* default */].plugin(__webpack_require__(518));\n        this.resetAll();\n    }\n    Data.prototype.resetAll = function () {\n        this.db = null;\n        this.currentVisit = null;\n        this.currentUnsavedItemData = null;\n        this.emptyUnitList = false;\n        // This sets the # of tags in the room/overall tag lists (3-5 suggested)\n        this.numberOfTagsForSummary = 5;\n        this.inspectionData = { data: {} };\n        this.inspectionObjList = { data: [] };\n        this.allUnits = { data: [] };\n        this.roomStructure = {};\n        this.inspectionTemplate = {};\n        this.templateStructure = {};\n        this.hospitalityStructure = {\n            count: 0,\n            sum: 0,\n            intPortion: '0',\n            remainderPortion: '.00'\n        };\n        // roomItemKeysObjs array has objects like this {roomID, itemID}\n        // Note that the items inspected count is not just issues (but all inspected items)\n        this.issueStructure = {\n            '_total': 0,\n            '_itemsInspectedCount': 0,\n            \"_flagsList\": [],\n            '_keys': ['Urgent', 'Serious', 'Immediate', 'Delayed', 'Zen'],\n            '_problemKeyDict': { 'Urgent': true, 'Serious': true, 'Immediate': true },\n            '_tagCounts': {},\n            '_tagHighestArray': [],\n            'Urgent': {\n                count: 0,\n                timelineText: '< 30 days',\n                roomItemKeysObjs: []\n            },\n            'Serious': {\n                count: 0,\n                timelineText: '< 6 months',\n                roomItemKeysObjs: []\n            },\n            'Immediate': {\n                count: 0,\n                timelineText: '< 1 year',\n                roomItemKeysObjs: []\n            },\n            'Delayed': {\n                count: 0,\n                timelineText: '< 2 years',\n                roomItemKeysObjs: []\n            },\n            'Zen': {\n                count: 0,\n                timelineText: '2+ years',\n                roomItemKeysObjs: []\n            }\n        };\n        // Hardcoding this for now but in the future should come from the database\n        // In initDB we call updateTemplateChoices so that '/Default' gets rewritten to be the account/username of logged in user\n        this.templateChoices = [\n            {\n                \"_id\": \"!templates/v6/1 Bed, 1 Bath/Default\",\n                \"displayName\": \"Studio\",\n                \"unitDetails\": {\n                    \"bedrooms\": 0,\n                    \"bathrooms\": 1\n                }\n            },\n            {\n                \"_id\": \"!templates/v6/1 Bed, 1 Bath/Default\",\n                \"displayName\": \"1 Bed, 1 Bath\",\n                \"unitDetails\": {\n                    \"bedrooms\": 1,\n                    \"bathrooms\": 1\n                }\n            },\n            {\n                \"_id\": \"!templates/v6/2 Bed, 2 Bath/Default\",\n                \"displayName\": \"2 Bed, 2 Bath\",\n                \"unitDetails\": {\n                    \"bedrooms\": 2,\n                    \"bathrooms\": 2\n                }\n            },\n            {\n                \"_id\": \"!templates/v6/3 Bed, 3 Bath/Default\",\n                \"displayName\": \"3 Bed, 3 Bath\",\n                \"unitDetails\": {\n                    \"bedrooms\": 3,\n                    \"bathrooms\": 2.5\n                }\n            }\n        ];\n    };\n    ;\n    // This function modifies the ids of our hardcoded template choices based on the username of the logged in user\n    Data.prototype.updateTemplateChoices = function (username) {\n        for (var _i = 0, _a = this.templateChoices; _i < _a.length; _i++) {\n            var template = _a[_i];\n            template._id = template._id.split('/Default').join('/' + username);\n        }\n    };\n    Data.prototype.syncDB = function (self) {\n        console.log('syncDB called');\n        this.db.sync(this.remoteSyncDBString)\n            .on('change', function (info) {\n            console.log('sync doc change');\n        }).on('denied', function (err) {\n            // a document failed to replicate (e.g. due to permissions)\n            console.log('sync doc denied');\n        }).on('complete', function (info) {\n            // handle complete\n            console.log('overall sync complete');\n        }).on('error', function (err) {\n            // handle error\n            console.log('overall sync error');\n            console.error(err);\n        })\n            .then(function () {\n            self.syncTimer();\n        })\n            .catch(function (err) {\n            self.syncTimer();\n        });\n    };\n    ;\n    /* tslint:disable */\n    Data.prototype.syncTimer = function () {\n        var _this = this;\n        /* tslint:enable */\n        console.log('syncTimer called');\n        setTimeout(function () {\n            _this.syncDB(_this);\n        }, 5 * 60 * 1000);\n    };\n    ;\n    Data.prototype.initDB = function (username, credential) {\n        var _this = this;\n        if (this.db === null) {\n            this.updateTemplateChoices(username);\n            __WEBPACK_IMPORTED_MODULE_1_pouchdb__[\"a\" /* default */].debug.disable();\n            this.remoteSyncDBString = 'https://';\n            this.remoteSyncDBString += username + ':' + credential + '@';\n            // marsi-real-world-v5 uses per organization records and new ids schema (!units etc)\n            this.remoteSyncDBString += 'marsi-envoy.herokuapp.com/marsi-real-world-v5';\n            // Note - released this to production for local-only db testing on June 11 9PM\n            var localDBString = username + '-live1-marsi-real-world-v5';\n            // This was used for testing without requiring login previously\n            /*if (username === '') {\n             localDBString = 'pickettd-temp-marsi-real-world-v4';\n             //temp-marsi-real-world-v4 has new ids schema (!units etc)\n             this.remoteSyncDBString = 'https://mymarsi.cloudant.com/temp-marsi-real-world-v4';\n             }*/\n            // This sequence of try/catches is to support a graceful decline of performance for Safari support\n            // First the app tries indexdb as a backend, then sqlite, then fruitdown, and finally websql\n            // Because some versions of mobile Safari have a 50MB max size for websql, we request 49MB in that fallback case\n            try {\n                this.db = new __WEBPACK_IMPORTED_MODULE_1_pouchdb__[\"a\" /* default */](localDBString + '-idb', { /*auto_compaction: true, */ adapter: 'idb' });\n            }\n            catch (idbError) {\n                console.log(idbError);\n                try {\n                    this.db = new __WEBPACK_IMPORTED_MODULE_1_pouchdb__[\"a\" /* default */](localDBString + '-sqlite', {\n                        /*auto_compaction: true, */\n                        adapter: 'cordova-sqlite',\n                        iosDatabaseLocation: 'default'\n                    });\n                }\n                catch (sqliteError) {\n                    console.log(sqliteError);\n                    try {\n                        //this.db = new PouchDB(localDBString + '-fruitdown', {/*auto_compaction: true, */adapter: 'fruitdown'});\n                        //}\n                        //catch (fruitdownError) {\n                        //console.log(fruitdownError);\n                        //try {\n                        this.db = new __WEBPACK_IMPORTED_MODULE_1_pouchdb__[\"a\" /* default */](localDBString + '-websql', { /*auto_compaction: true, */ adapter: 'websql', size: 49 });\n                    }\n                    catch (webSqlError) {\n                        console.error(webSqlError);\n                    }\n                    //}\n                }\n            }\n            console.log('Starting replication from cloud database');\n            return new Promise(function (resolve) {\n                return _this.db.replicate.from(_this.remoteSyncDBString)\n                    .on('change', function (info) {\n                    console.log('replicate change');\n                }).on('denied', function (err) {\n                    // a document failed to replicate (e.g. due to permissions)\n                    console.log('replicate denied');\n                }).on('complete', function (info) {\n                    // handle complete\n                    console.log('replicate complete');\n                    //getDocuments();\n                }).on('error', function (err) {\n                    // handle error\n                    console.log('replicate error');\n                    console.error(err);\n                })\n                    .then(function (result) {\n                    console.log('Call to replicate cloud database completed successfully');\n                    return true;\n                }).catch(function (error) {\n                    console.log(error);\n                    return false;\n                }).then(function (result) {\n                    // Putting in this extra then to act as a finally block\n                    _this.getDocument('!access')\n                        .then(function (result) {\n                        if (result.dropbox) {\n                            _this.dropbox.setAccessToken(result.dropbox, username);\n                        }\n                    });\n                    resolve(_this.db);\n                    // calling sync time for the first time\n                    _this.syncDB(_this);\n                    return false;\n                });\n            });\n        }\n        else {\n            // In this case the db is already initialized\n            return new Promise(function (resolve) {\n                resolve(_this.db);\n            });\n        }\n    };\n    // This function takes an initial room ID and an itemID. Then it looks in the template and builds a list of all rooms with that item\n    Data.prototype.findAllRooms = function (initialRoomID, itemID) {\n        var returnArray = [];\n        var justItemWithoutRoom = itemID.split(initialRoomID + '|').join('');\n        for (var _i = 0, _a = this.inspectionTemplate.roomOrder; _i < _a.length; _i++) {\n            var roomID = _a[_i];\n            var itemInRoom = roomID + '|' + justItemWithoutRoom;\n            if (this.inspectionTemplate.data[roomID].data[itemInRoom]) {\n                returnArray.push(roomID);\n            }\n        }\n        return returnArray;\n    };\n    // This function takes an inspection doc id as input, queries the db for all of its visit data,\n    // merges them into the inspection data variable, and returns that\n    Data.prototype.getVisitData = function (inspection) {\n        var _this = this;\n        var inspectionID = inspection._id;\n        // Clear all previous room data\n        for (var roomID in this.roomStructure) {\n            delete this.roomStructure[roomID];\n        }\n        this.currentVisit = null;\n        console.log('Querying visitData in db matching pattern: ' + 'visits/' + inspectionID.split('inspections/').join('') + '/');\n        this.inspectionData._id = inspectionID;\n        this.inspectionData.name = inspection.name;\n        this.inspectionData.propertyName = inspection.propertyName;\n        this.inspectionData.propertyID = inspection.propertyID;\n        this.inspectionData.lastVisitID = '';\n        this.inspectionData.data = {};\n        return this.db.allDocs({\n            include_docs: true,\n            startkey: 'visits/' + inspectionID.split('inspections/').join('') + '/',\n            endkey: 'visits/' + inspectionID.split('inspections/').join('') + '/\\uffff'\n        }).then(function (result) {\n            _this.zone.run(function () {\n                /*\n                //To debug particular visits and visit data can use snippets like\n                let particularVisit = {};\n                    let visitDataIds = {};\n                    let visitIds = {};\n                    result.rows.map((row) => {\n                        if (row.doc.visitID) {\n                          if (row.doc.visitID === 'visits/NOELANI 109/Inspection 1500575166651/Noelani/Visit 1500674091898') {\n                            _.merge(particularVisit, row.doc.data);\n                            visitDataIds[row.id] = true;\n                          }\n                          visitIds[row.doc.visitID] = true;\n                        }\n                      });debugger;\n                */\n                // This takes all the visit data rows and merges into one inspectionData object\n                var resultNumber = result.rows.length;\n                if (result.rows && resultNumber) {\n                    result.rows.map(function (row) {\n                        __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](_this.inspectionData.data, row.doc.data);\n                    });\n                    if ((result.rows[resultNumber - 1]).doc && (result.rows[resultNumber - 1]).doc._id) {\n                        _this.inspectionData.lastVisitID = (result.rows[resultNumber - 1]).doc._id;\n                    }\n                }\n                // Seems like this should be a better way to do this?\n                _this.setupRoomStructure();\n            });\n            return (_this.inspectionData);\n        });\n    };\n    Data.prototype.getAllUnits = function (currentUsername) {\n        var _this = this;\n        console.log('Querying for all units in database');\n        return new Promise(function (resolve) {\n            var time1 = window.performance.now();\n            // Note this method of on-the-fly map/reduce takes 2000ms\n            // Also note that you need the line `declare const emit;` in file\n            /*function unitById(doc) {\n              if (doc.type === 'Unit') {\n                emit(doc.id);\n              }\n            }\n            this.db.query(unitById, {include_docs: true}).then((result: any) => {\n              let time2 = window.performance.now();\n              console.log(`Time to query with on the fly view is ${time2-time1}`);\n              this.allUnits.data.splice(0);\n              result.rows.map((row) => {\n                this.allUnits.data.push(row.doc);\n              });\n              resolve(result);\n            }).catch(function (err) {\n              console.log(err);\n              resolve(this.allUnits.data);\n            });*/\n            // Note this method of pre-built map/reduce takes 45ms\n            /*let queryName = 'getUnits/all-units-by-id';\n            this.db.query(queryName, {include_docs: true}).then((result: any) => {\n              let time2 = window.performance.now();\n              console.log(`Time to query with prebuilt view is ${time2-time1}`);\n              this.allUnits.data.splice(0);\n              result.rows.map((row) => {\n                this.allUnits.data.push(row.doc);\n              });\n              resolve(result);\n            })\n            .catch((error) => {\n              console.log(error);\n              resolve(error);\n            });*/\n            // Note this method of allDocs then map filter takes 700ms\n            /*this.db.allDocs({\n              include_docs: true\n            }).then((result) => {\n              this.allUnits.data.splice(0);\n      \n              result.rows.map((row) => {\n                if (row.doc.type === 'Unit') {\n                  this.allUnits.data.push(row.doc);\n                  console.log('Pushed unit');\n                }\n              });\n              let time2 = window.performance.now();\n              console.log(`Time to query with alldocs is ${time2-time1}`);\n      \n      \n              resolve(result);\n            }).catch((error) => {\n              console.log(error);\n            });*/\n            //Note this just took 5.75 ms to get one doc (single key)\n            //And it took 8.3ms to get 2 docs (keys array)\n            /*this.db.allDocs({\n              include_docs: true,\n              keys: ['!units/HONOKOWAI PALMS A7','!units/KAPALUA GOLF VILLAS 17T8']\n            }).then((result) => {\n              this.allUnits.data.splice(0);\n              this.emptyUnitList = false;\n              result.rows.map((row) => {\n                if ((row.doc) && (row.doc.type === 'Unit')) {\n                  this.allUnits.data.push(row.doc);\n                  console.log('Pushed unit');\n                }\n              });\n              let time2 = window.performance.now();\n              console.log(`Time to query with alldocs that uses key or keys is ${time2-time1}`);\n              if (this.allUnits.data.length === 0) {\n                this.emptyUnitList = true;\n              }\n      \n              resolve(result);\n            }).catch((error) => {\n              console.log(error);\n            });*/\n            //Note this just took 7 ms to get the 2 test units by rewritting id pattern\n            _this.db.allDocs({\n                include_docs: true,\n                startkey: '!units/',\n                endkey: '!units/\\uffff'\n            }).then(function (result) {\n                _this.zone.run(function () {\n                    _this.allUnits.data.splice(0);\n                    _this.emptyUnitList = false;\n                    result.rows.map(function (row) {\n                        // this.allUnits.data.push(row.doc);\n                        if (row.doc.unitTemplate && (row.doc.unitTemplate._id.indexOf(currentUsername) !== -1)) {\n                            _this.allUnits.data.push(row.doc);\n                            console.log('Pushed unit');\n                        }\n                    });\n                    var time2 = window.performance.now();\n                    console.log(\"Time to query with alldocs that uses start/end is \" + (time2 - time1));\n                    if (_this.allUnits.data.length === 0) {\n                        _this.emptyUnitList = true;\n                    }\n                });\n                resolve(result);\n            }).catch(function (error) {\n                console.log(error);\n            });\n        });\n    };\n    Data.prototype.getInspections = function (unit) {\n        var _this = this;\n        // This is a hack to hide report data until data is loaded\n        delete this.hospitalityStructure.chartColors;\n        console.log('Querying inspections in db matching unitID: ' + unit._id);\n        var unitIDQuery = unit._id.split('!units/').join('');\n        return this.db.allDocs({\n            include_docs: true,\n            startkey: 'inspections/' + unitIDQuery + '/Inspection ',\n            endkey: 'inspections/' + unitIDQuery + '/Inspection \\uffff'\n        })\n            .then(function (result) {\n            _this.zone.run(function () {\n                _this.inspectionObjList.data.splice(0);\n                result.rows.map(function (row) {\n                    _this.inspectionObjList.data.push(row.doc);\n                });\n            });\n            return _this.inspectionObjList.data;\n        });\n    };\n    Data.prototype.getAllTemplatesIDs = function () {\n        return this.db.allDocs({\n            include_docs: false,\n            startkey: '!templates/',\n            endkey: '!templates/\\uffff'\n        });\n    };\n    // Note - this function is intended to be used for things like which items to highlight and other customizations.\n    // But using it hasn't been incorporated into the inspection logic yet.\n    /*\n      public getAllTemplatesPreferences(username) {\n        let returnObj = {};\n        return this.db.allDocs({\n            include_docs: false,\n            startkey: '!templatePreferences/'+username+'/',\n            endkey: '!templatePreferences/'+username+'/\\uffff'\n        })\n        .then((result: any) => {\n          result.rows.map((row) => {\n            _.merge(returnObj, row.doc.data);\n          });\n          return returnObj;\n        });\n      }\n    */\n    Data.prototype.getTemplateById = function (templateId) {\n        var _this = this;\n        delete this.inspectionTemplate.data;\n        delete this.inspectionTemplate.roomOrder;\n        this.templateStructure = {};\n        console.log('Getting template: ' + templateId);\n        return new Promise(function (resolve) {\n            _this.getDocument(templateId)\n                .then(function (result) {\n                _this.zone.run(function () {\n                    _this.inspectionTemplate.typesConditions = result.typesConditions;\n                    if (typeof (result.roomOrder) !== 'undefined') {\n                        _this.inspectionTemplate.roomOrder = result.roomOrder;\n                    }\n                    else {\n                        _this.setRoomOrderDefault();\n                    }\n                    _this.inspectionTemplate.trades = result.trades;\n                    if (!result.roomAliases) {\n                        result.roomAliases = {};\n                    }\n                    ;\n                    _this.inspectionTemplate.roomAliases = result.roomAliases;\n                    _this.templateStructure.tradeIDs = [];\n                    _this.templateStructure.typeConditionsByItemID = {};\n                    _this.inspectionTemplate.inspectionWorkTrackingConditions = result.inspectionWorkTrackingConditions;\n                    _this.templateStructure.timelineKeys = Object.keys(result.inspectionWorkTrackingConditions.data);\n                    for (var tradeID in result.trades) {\n                        _this.templateStructure.tradeIDs.push(tradeID);\n                        var trade = result.trades[tradeID];\n                        for (var roomID in trade.rooms) {\n                            if (typeof (_this.templateStructure[roomID]) === 'undefined') {\n                                _this.templateStructure[roomID] = { items: [], itemsByTrade: {}, tradeIDs: [] };\n                            }\n                            _this.templateStructure[roomID].itemsByTrade[tradeID] = [];\n                            _this.templateStructure[roomID].tradeIDs.push(tradeID);\n                        }\n                    }\n                    _this.inspectionTemplate.data = result.data;\n                    // Use for...in because these are objects/keys\n                    for (var roomID in _this.inspectionTemplate.data) {\n                        // Inventory really shouldn't be in this part of the template, but have to work around for now\n                        if (roomID !== 'Inventory') {\n                            for (var itemID in _this.inspectionTemplate.data[roomID].data) {\n                                var itemObj = _this.inspectionTemplate.data[roomID].data[itemID];\n                                _this.templateStructure[roomID].items.push(itemObj);\n                                if (_this.templateStructure[roomID].itemsByTrade[(itemObj['Trade or Service'])]) {\n                                    _this.templateStructure[roomID].itemsByTrade[(itemObj['Trade or Service'])].push(itemObj);\n                                }\n                                if (typeof (_this.templateStructure.typeConditionsByItemID[itemID]) === 'undefined') {\n                                    _this.templateStructure.typeConditionsByItemID[itemID] = [];\n                                }\n                                for (var conditionID in itemObj.typesConditions) {\n                                    _this.templateStructure.typeConditionsByItemID[itemID].push(conditionID);\n                                }\n                            }\n                        }\n                    }\n                });\n                resolve(_this.inspectionTemplate);\n                return _this.inspectionTemplate;\n            })\n                .catch(function (error) {\n                console.log(error);\n            });\n        });\n    };\n    // Inspection name and htmlInspectionTmplVer parameters are optional\n    Data.prototype.createNewInspection = function (unit, inspectionName, htmlInspectionTmplVer) {\n        // Putting in this quick/dirty way because using something like Date.toLocaleString is supported in older browsers consistantly\n        var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n        ];\n        var dateTimeNow = new Date();\n        var newName = inspectionName;\n        var newHtmlInspectionTmplVer = htmlInspectionTmplVer;\n        // v5 is the last HTML template used in marsi-prototyping (v1) repo.\n        // So far this sara-marsi-ionic2 (v2) repo is not using a HTML template versioning system though (Jun 05 2017)\n        if (typeof (htmlInspectionTmplVer) === 'undefined') {\n            newHtmlInspectionTmplVer = 'v5';\n        }\n        // Inspections can be given names by the user but right now in the first release of this repo we'll just use month plus year\n        if (typeof (inspectionName) === 'undefined') {\n            newName = monthNames[dateTimeNow.getMonth()] + ' ' + dateTimeNow.getFullYear();\n        }\n        else {\n            newName = newName.trim();\n        }\n        var newInspDoc = {\n            _id: 'inspections/' + unit._id.split('!units/').join('') + '/Inspection ' + dateTimeNow.getTime(),\n            type: 'Inspection',\n            name: newName,\n            propertyID: unit._id,\n            propertyName: unit.name,\n            templateID: unit.unitTemplate._id,\n            htmlInspectionTmplVer: newHtmlInspectionTmplVer\n        };\n        return this.saveDocument(newInspDoc);\n    };\n    // newInspName is an optional parameter\n    Data.prototype.createNewUnit = function (newUnitObj, newInspName) {\n        var _this = this;\n        newUnitObj.name = newUnitObj.name.trim();\n        var newUnitDoc = {\n            _id: '!units/' + newUnitObj.name.toUpperCase(),\n            name: newUnitObj.name,\n            type: 'Unit',\n            unitTemplate: newUnitObj.unitTemplate\n        };\n        this.allUnits.data.push(newUnitDoc);\n        // Create unit in DB and then create inspection in db (don't do in parallel or you may get accidental/orphaned new inspections)\n        // Passing undefined for the html inspection template version so that it will just use the default\n        return this.saveDocument(newUnitDoc)\n            .then(function (result) {\n            return _this.createNewInspection(newUnitDoc, newInspName, undefined);\n        });\n    };\n    ;\n    // We will base the construction of owner report docs on the inspection id (because that is the assumption now, one template for one inspection for one report)\n    Data.prototype.saveOwnerReport = function (currentReportRef, prevReportObj, inspection, userID, roomID) {\n        var foundChangeToSave = false;\n        var newInspectionID = inspection._id.split('inspections/').join('');\n        var reportObjToSave = {};\n        // Deep copy the current report data (data won't have function properties or Date strings so this method should be a fast/native way to deep copy)\n        // See https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript answers for details\n        var currentReportObj = JSON.parse(JSON.stringify(currentReportRef));\n        var newReportDoc = {\n            _id: 'reports/' + newInspectionID + '/' + userID + '/Report ' + new Date().getTime(),\n            type: 'Owner Report',\n            inspectionID: inspection._id,\n            userID: userID,\n            lastVisitID: inspection.lastVisitID,\n            reportDataDict: {}\n        };\n        if (this.issueStructure._flagsList) {\n            if (!currentReportObj.flagCount || (currentReportObj.flagCount !== this.issueStructure._flagsList.length)) {\n                reportObjToSave['flagCount'] = this.issueStructure._flagsList.length;\n                foundChangeToSave = true;\n            }\n        }\n        if (this.hospitalityStructure.count && this.hospitalityStructure.intPortion && this.hospitalityStructure.remainderPortion) {\n            var currentScoreString = this.hospitalityStructure.intPortion + this.hospitalityStructure.remainderPortion;\n            if (!currentReportObj.scoreString || (currentReportObj.scoreString !== currentScoreString)) {\n                reportObjToSave['scoreString'] = currentScoreString;\n                foundChangeToSave = true;\n            }\n        }\n        if (roomID === 'UNIT SUMMARY') {\n            if (currentReportObj.unitSummary !== prevReportObj.unitSummary) {\n                reportObjToSave['unitSummary'] = currentReportObj.unitSummary;\n                foundChangeToSave = true;\n            }\n            for (var _i = 0, _a = currentReportObj.victoriesList; _i < _a.length; _i++) {\n                var victObj = _a[_i];\n                var isNewVict = true;\n                var hasNewText = true;\n                var hasNewRemovedState = true;\n                if (prevReportObj['victoryObjDict']) {\n                    isNewVict = !prevReportObj['victoryObjDict'][victObj._id];\n                    if (prevReportObj['victoryObjDict'][victObj._id]) {\n                        hasNewText = (prevReportObj['victoryObjDict'][victObj._id].text !== victObj.text);\n                        hasNewRemovedState = (prevReportObj['victoryObjDict'][victObj._id].removeMe !== victObj.removeMe);\n                    }\n                }\n                if (isNewVict) {\n                    if (!reportObjToSave['victoryObjDict']) {\n                        reportObjToSave['victoryObjDict'] = {};\n                    }\n                    reportObjToSave['victoryObjDict'][victObj._id] = victObj;\n                    foundChangeToSave = true;\n                }\n                if (hasNewText) {\n                    if (!reportObjToSave['victoryObjDict']) {\n                        reportObjToSave['victoryObjDict'] = {};\n                    }\n                    if (!reportObjToSave['victoryObjDict'][victObj._id]) {\n                        reportObjToSave['victoryObjDict'][victObj._id] = {};\n                    }\n                    reportObjToSave['victoryObjDict'][victObj._id].text = victObj.text;\n                    foundChangeToSave = true;\n                }\n                if (hasNewRemovedState) {\n                    if (!reportObjToSave['victoryObjDict']) {\n                        reportObjToSave['victoryObjDict'] = {};\n                    }\n                    if (!reportObjToSave['victoryObjDict'][victObj._id]) {\n                        reportObjToSave['victoryObjDict'][victObj._id] = {};\n                    }\n                    reportObjToSave['victoryObjDict'][victObj._id].removeMe = victObj.removeMe;\n                    foundChangeToSave = true;\n                }\n            }\n            for (var _b = 0, _c = currentReportObj.failuresList; _b < _c.length; _b++) {\n                var failObj = _c[_b];\n                var isNewFail = true;\n                var hasNewText = true;\n                var hasNewRemovedState = true;\n                if (prevReportObj['failureObjDict']) {\n                    isNewFail = !prevReportObj['failureObjDict'][failObj._id];\n                    if (prevReportObj['failureObjDict'][failObj._id]) {\n                        hasNewText = (prevReportObj['failureObjDict'][failObj._id].text !== failObj.text);\n                        hasNewRemovedState = (prevReportObj['failureObjDict'][failObj._id].removeMe !== failObj.removeMe);\n                    }\n                }\n                if (isNewFail) {\n                    if (!reportObjToSave['failureObjDict']) {\n                        reportObjToSave['failureObjDict'] = {};\n                    }\n                    reportObjToSave['failureObjDict'][failObj._id] = failObj;\n                    foundChangeToSave = true;\n                }\n                if (hasNewText) {\n                    if (!reportObjToSave['failureObjDict']) {\n                        reportObjToSave['failureObjDict'] = {};\n                    }\n                    if (!reportObjToSave['failureObjDict'][failObj._id]) {\n                        reportObjToSave['failureObjDict'][failObj._id] = {};\n                    }\n                    reportObjToSave['failureObjDict'][failObj._id].text = failObj.text;\n                    foundChangeToSave = true;\n                }\n                if (hasNewRemovedState) {\n                    if (!reportObjToSave['failureObjDict']) {\n                        reportObjToSave['failureObjDict'] = {};\n                    }\n                    if (!reportObjToSave['failureObjDict'][failObj._id]) {\n                        reportObjToSave['failureObjDict'][failObj._id] = {};\n                    }\n                    reportObjToSave['failureObjDict'][failObj._id].removeMe = failObj.removeMe;\n                    foundChangeToSave = true;\n                }\n            }\n        }\n        else if (roomID === 'PROJECTS') {\n            for (var _d = 0, _e = currentReportObj.projObjList; _d < _e.length; _d++) {\n                var projObj = _e[_d];\n                var isNewProj = true;\n                var hasNewDesc = true;\n                var hasNewLow = true;\n                var hasNewHigh = true;\n                var hasNewRemovedState = true;\n                if (prevReportObj['projObjDict']) {\n                    isNewProj = !prevReportObj['projObjDict'][projObj._id];\n                    if (prevReportObj['projObjDict'][projObj._id]) {\n                        hasNewDesc = (prevReportObj['projObjDict'][projObj._id].description !== projObj.description);\n                        hasNewRemovedState = (prevReportObj['projObjDict'][projObj._id].removeMe !== projObj.removeMe);\n                        if (prevReportObj['projObjDict'][projObj._id].estimate) {\n                            hasNewLow = (prevReportObj['projObjDict'][projObj._id].estimate.lower !== projObj.estimate.lower);\n                            hasNewHigh = (prevReportObj['projObjDict'][projObj._id].estimate.upper !== projObj.estimate.upper);\n                        }\n                    }\n                }\n                if (isNewProj) {\n                    if (!reportObjToSave['projObjDict']) {\n                        reportObjToSave['projObjDict'] = {};\n                    }\n                    reportObjToSave['projObjDict'][projObj._id] = projObj;\n                    foundChangeToSave = true;\n                }\n                if (hasNewDesc) {\n                    if (!reportObjToSave['projObjDict']) {\n                        reportObjToSave['projObjDict'] = {};\n                    }\n                    if (!reportObjToSave['projObjDict'][projObj._id]) {\n                        reportObjToSave['projObjDict'][projObj._id] = {};\n                    }\n                    reportObjToSave['projObjDict'][projObj._id].description = projObj.description;\n                    foundChangeToSave = true;\n                }\n                if (hasNewLow) {\n                    if (!reportObjToSave['projObjDict']) {\n                        reportObjToSave['projObjDict'] = {};\n                    }\n                    if (!reportObjToSave['projObjDict'][projObj._id]) {\n                        reportObjToSave['projObjDict'][projObj._id] = {};\n                    }\n                    if (!reportObjToSave['projObjDict'][projObj._id].estimate) {\n                        reportObjToSave['projObjDict'][projObj._id].estimate = {};\n                    }\n                    reportObjToSave['projObjDict'][projObj._id].estimate.lower = projObj.estimate.lower;\n                    foundChangeToSave = true;\n                }\n                if (hasNewHigh) {\n                    if (!reportObjToSave['projObjDict']) {\n                        reportObjToSave['projObjDict'] = {};\n                    }\n                    if (!reportObjToSave['projObjDict'][projObj._id]) {\n                        reportObjToSave['projObjDict'][projObj._id] = {};\n                    }\n                    if (!reportObjToSave['projObjDict'][projObj._id].estimate) {\n                        reportObjToSave['projObjDict'][projObj._id].estimate = {};\n                    }\n                    reportObjToSave['projObjDict'][projObj._id].estimate.upper = projObj.estimate.upper;\n                    foundChangeToSave = true;\n                }\n                if (hasNewRemovedState) {\n                    if (!reportObjToSave['projObjDict']) {\n                        reportObjToSave['projObjDict'] = {};\n                    }\n                    if (!reportObjToSave['projObjDict'][projObj._id]) {\n                        reportObjToSave['projObjDict'][projObj._id] = {};\n                    }\n                    reportObjToSave['projObjDict'][projObj._id].removeMe = projObj.removeMe;\n                    foundChangeToSave = true;\n                }\n            }\n        }\n        else {\n            var foundRoom = false;\n            var roomIndex = 0;\n            var roomLength = currentReportObj.roomObjList.length;\n            for (roomIndex = 0; roomIndex < roomLength; roomIndex++) {\n                if (currentReportObj.roomObjList[roomIndex].name === roomID) {\n                    foundRoom = true;\n                    break;\n                }\n            }\n            if (foundRoom && currentReportObj.roomObjList[roomIndex] && currentReportObj.roomObjList[roomIndex].selectedPicObjs) {\n                for (var _f = 0, _g = currentReportObj.roomObjList[roomIndex].selectedPicObjs; _f < _g.length; _f++) {\n                    var picObj = _g[_f];\n                    var isNewPic = true;\n                    var isPicWithNewComment = true;\n                    var hasNewRemovedState = true;\n                    if ((prevReportObj[roomID]) && (prevReportObj[roomID].picsObjDict)) {\n                        isNewPic = !prevReportObj[roomID].picsObjDict[picObj._id];\n                        if (prevReportObj[roomID].picsObjDict[picObj._id]) {\n                            isPicWithNewComment = (prevReportObj[roomID].picsObjDict[picObj._id].comment !== picObj.comment);\n                            hasNewRemovedState = (prevReportObj[roomID].picsObjDict[picObj._id].removeMe !== picObj.removeMe);\n                        }\n                    }\n                    if (isNewPic) {\n                        if (!reportObjToSave[roomID]) {\n                            reportObjToSave[roomID] = { picsObjDict: {} };\n                        }\n                        if (!reportObjToSave[roomID].picsObjDict) {\n                            reportObjToSave[roomID].picsObjDict = {};\n                        }\n                        reportObjToSave[roomID].picsObjDict[picObj._id] = picObj;\n                        foundChangeToSave = true;\n                    }\n                    if (isPicWithNewComment) {\n                        if (!reportObjToSave[roomID]) {\n                            reportObjToSave[roomID] = { picsObjDict: {} };\n                        }\n                        if (!reportObjToSave[roomID].picsObjDict) {\n                            reportObjToSave[roomID].picsObjDict = {};\n                        }\n                        if (!reportObjToSave[roomID].picsObjDict[picObj._id]) {\n                            reportObjToSave[roomID].picsObjDict[picObj._id] = {};\n                        }\n                        reportObjToSave[roomID].picsObjDict[picObj._id].comment = picObj.comment;\n                        foundChangeToSave = true;\n                    }\n                    if (hasNewRemovedState) {\n                        if (!reportObjToSave[roomID]) {\n                            reportObjToSave[roomID] = { picsObjDict: {} };\n                        }\n                        if (!reportObjToSave[roomID].picsObjDict) {\n                            reportObjToSave[roomID].picsObjDict = {};\n                        }\n                        if (!reportObjToSave[roomID].picsObjDict[picObj._id]) {\n                            reportObjToSave[roomID].picsObjDict[picObj._id] = {};\n                        }\n                        reportObjToSave[roomID].picsObjDict[picObj._id].removeMe = picObj.removeMe;\n                        foundChangeToSave = true;\n                    }\n                }\n                if ((!prevReportObj[roomID]) || (currentReportObj.roomObjList[roomIndex].summary !== prevReportObj[roomID].summary)) {\n                    if (!reportObjToSave[roomID]) {\n                        reportObjToSave[roomID] = {};\n                    }\n                    reportObjToSave[roomID].summary = currentReportObj.roomObjList[roomIndex].summary;\n                    foundChangeToSave = true;\n                }\n            }\n        }\n        newReportDoc.reportDataDict = reportObjToSave;\n        // These two lines are just for testing (really should be saving as is commented out)\n        if (foundChangeToSave) {\n            return this.saveDocument(newReportDoc)\n                .then(function () {\n                console.log('Saved report data to db');\n                return newReportDoc;\n            });\n        }\n        else {\n            console.log('No changes to save in report');\n            return Promise.resolve({ reportDataDict: prevReportObj });\n        }\n    };\n    // Note that this functions requires this.allUnits to be populated\n    Data.prototype.getAllReportsByUnit = function () {\n        var _this = this;\n        if (!this.allUnits.data.length) {\n            return Promise.resolve([]);\n        }\n        else {\n            return this.db.allDocs({\n                include_docs: true,\n                startkey: 'reports/',\n                endkey: 'reports/\\uffff'\n            })\n                .then(function (result) {\n                var returnReport = {};\n                result.rows.map(function (row) {\n                    for (var index = 0, len = _this.allUnits.data.length; index < len; index++) {\n                        var thisUnitID = _this.allUnits.data[index]._id;\n                        var unitIDWithoutPrefix = thisUnitID.split('!units/').join('');\n                        if ((row.doc._id.indexOf(unitIDWithoutPrefix)) !== -1) {\n                            if (!returnReport[thisUnitID]) {\n                                returnReport[thisUnitID] = { projObjDict: {} };\n                            }\n                            if (row.doc.reportDataDict && row.doc.reportDataDict.projObjDict) {\n                                __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](returnReport[thisUnitID].projObjDict, row.doc.reportDataDict.projObjDict);\n                            }\n                            if (row.doc.reportDataDict && row.doc.reportDataDict.flagCount) {\n                                returnReport[thisUnitID].flagCount = row.doc.reportDataDict.flagCount;\n                            }\n                            if (row.doc.reportDataDict && row.doc.reportDataDict.scoreString) {\n                                returnReport[thisUnitID].scoreString = row.doc.reportDataDict.scoreString;\n                            }\n                            delete row.doc.reportDataDict;\n                            __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](returnReport[thisUnitID], row.doc);\n                            break;\n                        }\n                    }\n                });\n                return returnReport;\n            });\n        }\n    };\n    // Note that we do build the report doc id using the user id of the person that created the report.\n    // But to get report data on a unit/inspection we gather from all users\n    Data.prototype.getOwnerReport = function (inspectionID) {\n        var newInspectionID = inspectionID.split('inspections/').join('');\n        return this.db.allDocs({\n            include_docs: true,\n            startkey: 'reports/' + newInspectionID + '/',\n            endkey: 'reports/' + newInspectionID + '/\\uffff'\n        })\n            .then(function (result) {\n            var returnReport = {};\n            result.rows.map(function (row) {\n                __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](returnReport, row.doc.reportDataDict);\n            });\n            return returnReport;\n        });\n    };\n    // Note that roomIDs is an array to allow for the case of using the apply-to-all button to save an item's data for multiple rooms at once\n    Data.prototype.saveCurrentUnsavedItemData = function (userID, roomIDs, itemID) {\n        var _this = this;\n        if (this.currentUnsavedItemData !== null) {\n            // Deep copy the current item data (data won't have function properties or Date strings so this method should be a fast/native way to deep copy)\n            // See https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript answers for details\n            var itemDataCopy_1 = JSON.parse(JSON.stringify(this.currentUnsavedItemData));\n            // If we have a current visit already this returns immediately, otherwise it creates a visit\n            return this.createNewVisitOrReturnCurrent(userID)\n                .then(function () {\n                // Then set the unsaved back to null so new data can be added\n                _this.currentUnsavedItemData = null;\n                return _this.createNewVisitData(_this.currentVisit._id, roomIDs, itemID, itemDataCopy_1)\n                    .then(function (result) {\n                    console.log('Saved new visit data for item ' + itemID);\n                    return result;\n                })\n                    .catch(function (err) {\n                    return _this.zone.run(function () {\n                        console.error('Couldn\\'t save current unsaved data');\n                        // If there was a problem saving, then we can try to recover the data that didn't save yet\n                        if (_this.currentUnsavedItemData !== null) {\n                            __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](_this.currentUnsavedItemData, itemDataCopy_1);\n                        }\n                        else {\n                            _this.currentUnsavedItemData = itemDataCopy_1;\n                        }\n                        return Promise.reject(err);\n                    });\n                });\n            });\n        }\n        else {\n            return new Promise(function (resolve) {\n                resolve(null);\n                return false;\n            });\n        }\n    };\n    ;\n    Data.prototype.createNewVisitOrReturnCurrent = function (userID) {\n        var _this = this;\n        if (this.currentVisit === null) {\n            return this.createNewVisitAndSetCurrent(this.inspectionData._id, userID);\n        }\n        else {\n            return new Promise(function (resolve) {\n                resolve(_this.currentVisit);\n                return false;\n            });\n        }\n    };\n    ;\n    Data.prototype.createNewVisitAndSetCurrent = function (inspectionID, userID) {\n        var newInspectionID = inspectionID.split('inspections/').join('');\n        var newVisitDoc = {\n            _id: 'visits/' + newInspectionID + '/' + userID + '/Visit ' + new Date().getTime(),\n            type: 'Visit',\n            inspectionID: inspectionID,\n            userID: userID\n        };\n        this.currentVisit = newVisitDoc;\n        return this.saveDocument(newVisitDoc)\n            .then(function () {\n            // Adding this part because returning the result of save doc doesn't include a .id field\n            return newVisitDoc;\n        });\n    };\n    ;\n    // Note that roomIDs is an array to allow for the case of using the apply-to-all button to save an item's data for multiple rooms at once\n    Data.prototype.createNewVisitData = function (visitID, roomIDs, itemID, itemObj) {\n        var newVisitDataDoc = {\n            _id: visitID + '/' + itemID + ' ' + new Date().getTime(),\n            type: 'VisitData',\n            visitID: visitID,\n            data: {}\n        };\n        var itemParts = itemID.split('|');\n        // Note this relies on the roomID being the first part of the itemID\n        var justItemWithoutRoom = itemID.split(itemParts[0]).join('');\n        for (var _i = 0, roomIDs_1 = roomIDs; _i < roomIDs_1.length; _i++) {\n            var roomID = roomIDs_1[_i];\n            var itemInRoom = roomID + justItemWithoutRoom;\n            newVisitDataDoc.data[roomID] = { data: {} };\n            newVisitDataDoc.data[roomID].data[itemInRoom] = itemObj;\n            // In the case that apply to all is being used and we're writing multiple items to the db, we should make sure the in-memory record is updated for those other rooms too\n            if (roomIDs.length > 1) {\n                this.createItemStructIfNotExist(roomID, itemInRoom);\n                __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](this.inspectionData.data[roomID].data[itemInRoom], itemObj);\n            }\n        }\n        return this.saveDocument(newVisitDataDoc)\n            .then(function () {\n            console.log('Success creating new visit data');\n            return newVisitDataDoc;\n        });\n    };\n    ;\n    Data.prototype.saveDocument = function (doc) {\n        return this.db.put(doc)\n            .catch(function (err) {\n            console.error(err);\n            return Promise.reject(err);\n        });\n    };\n    // This is a generic function for getting a document from PouchDB\n    Data.prototype.getDocument = function (docID) {\n        return this.db.get(docID);\n    };\n    Data.prototype.resetCounts = function () {\n        this.hospitalityStructure.count = 0;\n        this.hospitalityStructure.sum = 0;\n        this.hospitalityStructure.intPortion = '0';\n        this.hospitalityStructure.remainderPortion = '.00';\n        this.issueStructure._total = 0;\n        this.issueStructure._itemsInspectedCount = 0;\n        this.issueStructure._flagsList = [];\n        this.issueStructure._tagCounts = {};\n        this.issueStructure._tagHighestArray.splice(0);\n        for (var a = 0; a < this.numberOfTagsForSummary; a++) {\n            this.issueStructure._tagHighestArray.push('');\n        }\n        this.issueStructure._tagCounts[''] = 0;\n        for (var _i = 0, _a = this.issueStructure._keys; _i < _a.length; _i++) {\n            var id = _a[_i];\n            this.issueStructure[id].count = 0;\n            this.issueStructure[id].roomItemKeysObjs.splice(0);\n        }\n    };\n    Data.prototype.getColorStringByRating = function (rating) {\n        if (rating <= 3.33) {\n            return 'rgba(254, 0, 0, 1)';\n        }\n        else if (rating >= 6.67) {\n            return 'rgba(0, 254, 0, 1)';\n        }\n        else {\n            return 'rgba(0, 0, 254, 1)';\n        }\n    };\n    Data.prototype.updateTagCounts = function (tagName, tagCounts, tagHighestArray) {\n        if (typeof (tagCounts[tagName]) === 'undefined') {\n            tagCounts[tagName] = 1;\n        }\n        else {\n            (tagCounts[tagName])++;\n        }\n        // Now we need to check if this current tag's new count is higher\n        // then our previous maximum (and move the previous maximums)\n        if (tagName !== tagHighestArray[0]) {\n            if (tagCounts[tagName] >= tagCounts[tagHighestArray[0]]) {\n                var indexOfTagName = tagHighestArray.indexOf(tagName);\n                // If the tagname is already in the array, then we start our\n                // overwrite procedure at that index in the array.\n                // But if it isn't in the list then our index starts at the end\n                if (indexOfTagName === -1) {\n                    indexOfTagName = tagHighestArray.length - 1;\n                }\n                for (var a = indexOfTagName; a > 0; a--) {\n                    tagHighestArray[a] = tagHighestArray[a - 1];\n                }\n                tagHighestArray[0] = tagName;\n            }\n        }\n    };\n    // If there isn't previous visit data for an item, will create structures for it in inspectionData to collect new input\n    Data.prototype.createItemStructIfNotExist = function (roomID, itemID) {\n        if (typeof (this.inspectionData.data[roomID]) === 'undefined') {\n            this.inspectionData.data[roomID] = { data: {} };\n            this.roomStructure[roomID] = { data: {} };\n        }\n        if (typeof (this.inspectionData.data[roomID].data[itemID]) === 'undefined') {\n            this.inspectionData.data[roomID].data[itemID] = {};\n            if (typeof (this.roomStructure[roomID].data.itemsObj) === 'undefined') {\n                this.roomStructure[roomID].data.itemsObj = {};\n            }\n            this.roomStructure[roomID].data.itemsObj[itemID] = {};\n            var templateItem = this.inspectionTemplate.data[roomID].data[itemID];\n            __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](this.inspectionData.data[roomID].data[itemID], templateItem);\n        }\n        if (typeof (this.inspectionData.data[roomID].data[itemID]['naChoice']) === 'undefined') {\n            this.inspectionData.data[roomID].data[itemID]['naChoice'] = false;\n        }\n        if (typeof (this.inspectionData.data[roomID].data[itemID]['mergedComments']) === 'undefined') {\n            this.inspectionData.data[roomID].data[itemID]['mergedComments'] = '';\n        }\n        if (typeof (this.inspectionData.data[roomID].data[itemID]['inspectionWorkTrackingConditions']) === 'undefined') {\n            this.inspectionData.data[roomID].data[itemID]['inspectionWorkTrackingConditions'] = {};\n            var templateData = this.inspectionTemplate.data[roomID].data[itemID]['inspectionWorkTrackingConditions'];\n            __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](this.inspectionData.data[roomID].data[itemID]['inspectionWorkTrackingConditions'], templateData);\n        }\n        if (typeof (this.inspectionData.data[roomID].data[itemID]['typesConditions']) === 'undefined') {\n            this.inspectionData.data[roomID].data[itemID]['typesConditions'] = {};\n            var templateData = this.inspectionTemplate.data[roomID].data[itemID]['typesConditions'];\n            __WEBPACK_IMPORTED_MODULE_2_lodash__[\"merge\"](this.inspectionData.data[roomID].data[itemID]['typesConditions'], templateData);\n        }\n    };\n    // This function parses the inspectionData and creates a roomList for the UI\n    Data.prototype.setupRoomStructure = function () {\n        this.resetCounts();\n        for (var roomID in this.inspectionData.data) {\n            var roomObj = {\n                _id: roomID,\n                itemList: [],\n                issueCount: 0,\n                flagsList: [],\n                completedItemCount: 0,\n                commentCount: 0,\n                hospitalityCount: 0,\n                hospitalitySum: 0,\n                hospitalityInt: '0',\n                hospitalityRemainder: '.00',\n                chartColors: [],\n                tagCounts: {},\n                tagHighestArray: [],\n                itemPicObjs: [],\n                itemsObj: {},\n                issueTypeCounts: {}\n            };\n            for (var a = 0; a < this.numberOfTagsForSummary; a++) {\n                roomObj.tagHighestArray.push('');\n            }\n            for (var _i = 0, _a = this.issueStructure['_keys']; _i < _a.length; _i++) {\n                var issueKey = _a[_i];\n                roomObj.issueTypeCounts[issueKey] = 0;\n            }\n            roomObj.tagCounts[''] = 0;\n            for (var itemID in this.inspectionData.data[roomID].data) {\n                var inputItemObj = this.inspectionData.data[roomID].data[itemID];\n                var itemObj = {\n                    _id: itemID,\n                    item: inputItemObj,\n                    typeConditionKeys: [],\n                    commentKeys: [],\n                    imageKeys: []\n                };\n                if (inputItemObj.reportFlag) {\n                    var itemParts = itemID.split('|');\n                    // Note this relies on the item name being the last part of the itemID\n                    var justItemName = itemParts[itemParts.length - 1];\n                    roomObj.flagsList.push(justItemName);\n                    this.issueStructure._flagsList.push(itemID);\n                }\n                if (inputItemObj.typesConditions) {\n                    for (var _b = 0, _c = Object.keys(inputItemObj.typesConditions); _b < _c.length; _b++) {\n                        var typeConditionKey = _c[_b];\n                        var theseOptionKeys = Object.keys(inputItemObj.typesConditions[typeConditionKey]);\n                        var typeConditionObj = {\n                            _id: typeConditionKey,\n                            optionKeys: theseOptionKeys\n                        };\n                        // Right now we just check if the template is already loaded\n                        // But it would be smoother if we would just wait for the template\n                        // in the case where it hasn't finished loading\n                        if (this.inspectionTemplate.typesConditions) {\n                            for (var _d = 0, theseOptionKeys_1 = theseOptionKeys; _d < theseOptionKeys_1.length; _d++) {\n                                var thisOptionKey = theseOptionKeys_1[_d];\n                                var option = this.getOptionTemplateFromID(typeConditionKey, thisOptionKey);\n                                if (option) {\n                                    var tagName = option.optionName;\n                                    if (inputItemObj.typesConditions[typeConditionKey][thisOptionKey].textValue) {\n                                        tagName += ': ' + inputItemObj.typesConditions[typeConditionKey][thisOptionKey].textValue;\n                                    }\n                                    if (typeof (this.issueStructure._tagCounts[tagName]) === 'undefined') {\n                                        this.issueStructure._tagCounts[tagName] = 1;\n                                    }\n                                    else {\n                                        (this.issueStructure._tagCounts[tagName])++;\n                                    }\n                                    // Update the tag counts for this room\n                                    this.updateTagCounts(tagName, roomObj.tagCounts, roomObj.tagHighestArray);\n                                    // Update the tag counts for the overall inspection\n                                    this.updateTagCounts(tagName, this.issueStructure._tagCounts, this.issueStructure._tagHighestArray);\n                                }\n                            }\n                        }\n                        itemObj.typeConditionKeys.push(typeConditionObj);\n                    }\n                }\n                if (inputItemObj.mergedComments) {\n                    roomObj.commentCount++;\n                }\n                else {\n                    // We only check for comments if mergedComments doesn't exist\n                    if (inputItemObj.comments) {\n                        itemObj.commentKeys = Object.keys(inputItemObj.comments);\n                        roomObj.commentCount += itemObj.commentKeys.length;\n                        if (typeof (inputItemObj.mergedComments) === 'undefined') {\n                            inputItemObj.mergedComments = '';\n                            for (var commentKey in inputItemObj.comments) {\n                                inputItemObj.mergedComments += inputItemObj.comments[commentKey].text + '\\n';\n                            }\n                        }\n                    }\n                }\n                if (inputItemObj.images) {\n                    itemObj.imageKeys = Object.keys(inputItemObj.images);\n                    for (var _e = 0, _f = itemObj.imageKeys; _e < _f.length; _e++) {\n                        var imageID = _f[_e];\n                        /*if (inputItemObj.images[imageID].src) {\n                          let imageObj = inputItemObj.images[imageID];\n                          let data = imageObj.src.split('www.dropbox.com').join('dl.dropboxusercontent.com');\n                          // This would be a quick/dirty way to handle the resizing.\n                          // Downsides: slow to convert / uses lots of memory to hold thumbnails\n                          var loadingImage = (window as any).loadImage(data, function (img) {\n                            imageObj.src = img.toDataURL();\n                            return imageObj;\n                          },{\n                            maxWidth: 400,\n                            orientation: true\n                          });\n                          if (!loadingImage) {\n                            console.error('No image loading library');\n                          }\n                        }*/\n                        var itemPicObj = {\n                            itemID: itemID,\n                            picID: imageID\n                        };\n                        roomObj.itemPicObjs.push(itemPicObj);\n                    }\n                }\n                if (inputItemObj.hospitalityRating) {\n                    var hospIntVal = parseInt(inputItemObj.hospitalityRating);\n                    // Just discovered that sometimes the inputItemObj has hospitalityRating set to a string 'undefined', so make sure our parsed result is really a number\n                    if (!(isNaN(hospIntVal))) {\n                        if (inputItemObj.markSectionComplete && !inputItemObj.naChoice) {\n                            roomObj.hospitalityCount++;\n                            roomObj.hospitalitySum += hospIntVal;\n                            this.hospitalityStructure.count++;\n                            this.hospitalityStructure.sum += hospIntVal;\n                        }\n                    }\n                }\n                if (inputItemObj.markSectionComplete && !inputItemObj.naChoice) {\n                    roomObj.completedItemCount++;\n                }\n                var putAtTop = false;\n                // We want issues to be listed at the top\n                // So if it is an issue we will use unshift to add to the front\n                // Else it is added to the back (and items without a work tracking condition will be put at the back)\n                if (inputItemObj.inspectionWorkTrackingConditions && inputItemObj.inspectionWorkTrackingConditions.selection) {\n                    if (inputItemObj.markSectionComplete && !inputItemObj.naChoice) {\n                        this.issueStructure._itemsInspectedCount++;\n                    }\n                    // All selection types should be in the issue struct now\n                    if (this.issueStructure[inputItemObj.inspectionWorkTrackingConditions.selection]) {\n                        var roomItemKeysObj = {\n                            roomID: roomID,\n                            itemID: itemID,\n                            typeConditionKeys: [],\n                            commentKeys: [],\n                            imageKeys: []\n                        };\n                        if (inputItemObj.comments) {\n                            roomItemKeysObj.commentKeys = itemObj.commentKeys;\n                        }\n                        if (inputItemObj.images) {\n                            roomItemKeysObj.imageKeys = itemObj.imageKeys;\n                        }\n                        if (inputItemObj.typesConditions) {\n                            roomItemKeysObj.typeConditionKeys = itemObj.typeConditionKeys;\n                        }\n                        this.issueStructure[inputItemObj.inspectionWorkTrackingConditions.selection].roomItemKeysObjs.push(roomItemKeysObj);\n                        if (inputItemObj.markSectionComplete && !inputItemObj.naChoice) {\n                            this.issueStructure[inputItemObj.inspectionWorkTrackingConditions.selection].count++;\n                            roomObj.issueTypeCounts[inputItemObj.inspectionWorkTrackingConditions.selection]++;\n                        }\n                        if (this.issueStructure['_problemKeyDict'][inputItemObj.inspectionWorkTrackingConditions.selection]) {\n                            // We set put at top because the item needs to be unshifted\n                            putAtTop = true;\n                            if (inputItemObj.markSectionComplete && !inputItemObj.naChoice) {\n                                roomObj.issueCount++;\n                                this.issueStructure['_total']++;\n                            }\n                        }\n                    }\n                }\n                roomObj.itemsObj[itemObj._id] = itemObj;\n                if (putAtTop) {\n                    roomObj.itemList.unshift(itemObj);\n                }\n                else {\n                    roomObj.itemList.push(itemObj);\n                }\n            }\n            // Finish roomObj setup\n            var roomScore = roomObj.hospitalitySum / roomObj.hospitalityCount;\n            if (roomObj.hospitalityCount > 0) {\n                roomObj.hospitalityInt = (Math.floor(roomScore)).toString();\n                roomObj.hospitalityRemainder = ((roomScore) % 1).toFixed(2).substring(1);\n            }\n            var roomChartColor = this.getColorStringByRating(roomScore);\n            roomObj.chartColors = [{\n                    backgroundColor: [\n                        roomChartColor,\n                        'rgba(221, 221, 221, 1)'\n                    ],\n                    borderColor: [\n                        roomChartColor,\n                        'rgba(221, 221, 221, 1)'\n                    ]\n                }];\n            if (typeof (this.roomStructure[roomObj._id]) === 'undefined') {\n                this.roomStructure[roomObj._id] = {};\n            }\n            this.roomStructure[roomObj._id].data = roomObj;\n        }\n        var overallScore = this.hospitalityStructure.sum / this.hospitalityStructure.count;\n        if (this.hospitalityStructure.count > 0) {\n            this.hospitalityStructure.intPortion = (Math.floor(overallScore)).toString();\n            this.hospitalityStructure.remainderPortion = ((overallScore) % 1).toFixed(2).substring(1);\n        }\n        var chartColor = this.getColorStringByRating(overallScore);\n        this.hospitalityStructure.chartColors = [{\n                backgroundColor: [\n                    chartColor,\n                    'rgba(221, 221, 221, 1)'\n                ],\n                borderColor: [\n                    chartColor,\n                    'rgba(221, 221, 221, 1)'\n                ]\n            }];\n    };\n    Data.prototype.setRoomOrderDefault = function () {\n        this.inspectionTemplate.roomOrder = [\n            'GENERAL',\n            'ENTRY/HALLWAY',\n            'LANAI',\n            'KITCHEN',\n            'LIVING ROOM',\n            'DINING ROOM',\n            'MASTER BATHROOM',\n            'BATHROOM #1',\n            'BATHROOM #2',\n            'MASTER BEDROOM',\n            'BEDROOM #1',\n            'BEDROOM #2'\n        ];\n    };\n    return Data;\n}());\nData = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"])(),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], __WEBPACK_IMPORTED_MODULE_3__dropbox_dropbox__[\"a\" /* DropboxProvider */]])\n], Data);\n\n//# sourceMappingURL=data.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/providers/data.ts\n// module id = 18\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/providers/data.ts");

/***/ }),

/***/ 182:
/***/ (function(module, exports) {

eval("function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 182;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 182\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src_lazy");

/***/ }),

/***/ 226:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LoginPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__providers_auth_service__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__inspectionlist_inspectionlist__ = __webpack_require__(120);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n//import { RegisterPage } from '../register/register';\n\nvar LoginPage = (function () {\n    function LoginPage(nav, auth, alertCtrl, loadingCtrl, zone) {\n        this.nav = nav;\n        this.auth = auth;\n        this.alertCtrl = alertCtrl;\n        this.loadingCtrl = loadingCtrl;\n        this.zone = zone;\n        this.registerCredentials = { username: '', password: '', rememberMe: false };\n    }\n    LoginPage.prototype.ionViewDidLoad = function () {\n        var _this = this;\n        this.auth.attemptRememberedLogin()\n            .then(function (isAllowed) {\n            if (isAllowed) {\n                _this.showLoading();\n                _this.userIsAllowed();\n            }\n        });\n    };\n    /*public createAccount() {\n      this.nav.push(RegisterPage);\n    }*/\n    LoginPage.prototype.login = function () {\n        var _this = this;\n        this.showLoading();\n        // Make sure server session isn't reused by new user\n        this.auth.logout().subscribe(function () {\n            return _this.auth.login(_this.registerCredentials).subscribe(function (allowed) {\n                if (allowed) {\n                    _this.userIsAllowed();\n                }\n                else {\n                    _this.showError('Login Failed');\n                }\n            }, function (error) {\n                _this.showError(error);\n            });\n        });\n    };\n    LoginPage.prototype.userIsAllowed = function () {\n        var _this = this;\n        this.zone.run(function () {\n            _this.loading.dismiss();\n            _this.nav.setRoot(__WEBPACK_IMPORTED_MODULE_3__inspectionlist_inspectionlist__[\"a\" /* InspectionListPage */]);\n        });\n    };\n    LoginPage.prototype.showLoading = function () {\n        this.loading = this.loadingCtrl.create({\n            content: 'Please wait...'\n        });\n        this.loading.present();\n    };\n    LoginPage.prototype.showError = function (text) {\n        var _this = this;\n        setTimeout(function () {\n            _this.loading.dismiss();\n        });\n        var alert = this.alertCtrl.create({\n            title: 'Login Failed',\n            subTitle: text,\n            buttons: ['OK']\n        });\n        alert.present(prompt);\n    };\n    return LoginPage;\n}());\nLoginPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-login',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/login/login.html\"*/'<ion-header>\\n  <ion-navbar>\\n    <ion-title>\\n      <span style=\"display:none;\">MARSI</span>\\n      <div class=\"logo content-max-width\">\\n        <img src=\"assets/img/mymarsi-logo-large.png\" alt=\"Logo\" />\\n      </div>\\n    </ion-title>\\n  </ion-navbar>\\n</ion-header>\\n<ion-content class=\"login-content\">\\n  <form (ngSubmit)=\"login()\" #registerForm=\"ngForm\">\\n    <ion-row justify-content-center >\\n      <ion-col col-md-6 class=\"login\" justify-content-center>\\n\\n        <h1>Login</h1>\\n        <ion-label>Username</ion-label>\\n        <ion-input type=\"text\" placeholder=\"Username\" name=\"username\" [(ngModel)]=\"registerCredentials.username\" required></ion-input>\\n        <ion-label>Password</ion-label>\\n        <ion-input type=\"password\" placeholder=\"Password\" name=\"password\" [(ngModel)]=\"registerCredentials.password\" required></ion-input>\\n\\n        <ion-item>\\n          <ion-checkbox name=\"rememberMe\"\\n                        [(ngModel)]=\"registerCredentials.rememberMe\"\\n                        (ngModelChange)=\"cdRef.detectChanges()\"></ion-checkbox>\\n            <ion-label>Remember me</ion-label>\\n          </ion-item>\\n        <button color=\"secondary\" ion-button class=\"submit-btn\" full type=\"submit\">Login</button>\\n      </ion-col>\\n    </ion-row>\\n\\n  </form>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/login/login.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_2__providers_auth_service__[\"a\" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"a\" /* AlertController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"f\" /* LoadingController */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"]])\n], LoginPage);\n\n//# sourceMappingURL=login.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/login/login.ts\n// module id = 226\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/login/login.ts");

/***/ }),

/***/ 228:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return InspectionCreatorPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__popovertrade_popovertrade__ = __webpack_require__(229);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__popoverinsdate_popoverinsdate__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__providers_auth_service__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__providers_dropbox_dropbox__ = __webpack_require__(122);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n// Note that the suggestion to use ChangeDectorRef for iOS issues\n// comes from http://stackoverflow.com/questions/40337947/angular-2-list-is-not-refresh-on-running-ios\n\n\n// Commenting out the camera because for now we're using html5 input for all devices\n//import {Camera, CameraOptions} from '@ionic-native/camera';\n\n\n\n\n\n\nvar InspectionCreatorPage = (function () {\n    function InspectionCreatorPage(navCtrl, popoverCtrl, navParams, dataProvider, cdRef /*, public camera: Camera*/, plt, auth, zone, dropbox, toast, alertCtrl) {\n        var _this = this;\n        this.navCtrl = navCtrl;\n        this.popoverCtrl = popoverCtrl;\n        this.navParams = navParams;\n        this.dataProvider = dataProvider;\n        this.cdRef = cdRef; /*, public camera: Camera*/\n        this.plt = plt;\n        this.auth = auth;\n        this.zone = zone;\n        this.dropbox = dropbox;\n        this.toast = toast;\n        this.alertCtrl = alertCtrl;\n        console.log('This device has platforms: ' + this.plt.platforms());\n        // In case the page is opened without a unit provided to the router\n        this.unit = {\n            _id: '',\n            name: ''\n        };\n        this.showImageLoading = [];\n        this.showView = \"roomselection\";\n        // Have to use metadata reference in order to change child values in popover and affect the inspection creator component\n        this.metadata = {\n            currentRoomID: '',\n            currentTradeID: '',\n            currentTradeIndex: 0,\n            selectedItem: {},\n            applyToAll: false,\n            loadCompleted: false,\n            saveCurrentItem: function (roomID, itemID) {\n                var itemName = _this.dataProvider.inspectionTemplate.data[roomID].data[itemID].Item;\n                if (_this.dataProvider.currentUnsavedItemData !== null) {\n                    var username = _this.auth.currentUser.username;\n                    var roomList = [roomID];\n                    if (_this.metadata.applyToAll) {\n                        roomList = _this.dataProvider.findAllRooms(roomID, itemID);\n                    }\n                    console.log('Saving this roomList: ' + roomList);\n                    _this.dataProvider.saveCurrentUnsavedItemData(username, roomList, itemID)\n                        .then(function () {\n                        _this.invokeSavePopup(itemName);\n                    })\n                        .catch(function (err) {\n                        var alert = _this.alertCtrl.create({\n                            title: 'Save failed',\n                            subTitle: 'Please try fully restarting the app and trying that input again',\n                            buttons: ['Ok']\n                        });\n                        alert.present();\n                    });\n                }\n            }\n        };\n        this.typeConditionStructure = {};\n        this.showTips = false;\n        this.tipsIcon = 'ios-arrow-down';\n    }\n    InspectionCreatorPage.prototype.ionViewDidLoad = function () {\n        var _this = this;\n        this.metadata.loadCompleted = false;\n        this.showImageLoading.splice(0);\n        var noInspectionLoad = this.navParams.get('noInspectionLoad');\n        var unit = this.navParams.get('unit');\n        if ((typeof (unit) !== 'undefined') && (typeof (unit._id) !== 'undefined')) {\n            this.unit = unit;\n            if ((typeof (noInspectionLoad) === 'undefined') || (noInspectionLoad === false)) {\n                this.dataProvider.getInspections(unit).then(function (inspections) {\n                    if ((inspections.length) && (inspections.length > 0)) {\n                        // Example use of creating a new visit object when entering the inspector creator and one doesn't exist yet\n                        /*\n                         if (this.dataProvider.currentVisit === null) {\n                         this.dataProvider.createNewVisitAndSetCurrent(inspections[0]._id, this.auth.currentUser.username).then(result => {\n                         console.log('Current visit is ' + this.dataProvider.currentVisit);\n                         });\n                         }\n                         */\n                        // The template code should block rendering by waiting for data inside the appropriate structures\n                        // But after the template and visit data is gathered then we mark items in the inspection creator as complete if they have data\n                        Promise.all([_this.dataProvider.getTemplateById(inspections[0].templateID), _this.dataProvider.getVisitData(inspections[0])])\n                            .then(function () {\n                            _this.metadata.loadCompleted = true;\n                        });\n                    }\n                    else {\n                        _this.metadata.loadCompleted = true;\n                    }\n                });\n            }\n            else {\n                this.metadata.loadCompleted = true;\n            }\n        }\n        else {\n            this.metadata.loadCompleted = true;\n        }\n    };\n    // This is the method for pics being added now (html5 input method)\n    InspectionCreatorPage.prototype.imageFileInputChanged = function (fileInput) {\n        var _this = this;\n        if (fileInput.target.files && fileInput.target.files[0]) {\n            this.showImageLoading.push(true);\n            var roomIDForPic_1 = this.metadata.currentRoomID;\n            var itemIDForPic_1 = this.metadata.selectedItem._id;\n            if (!this.dataProvider.inspectionData.data[roomIDForPic_1].data[itemIDForPic_1].images) {\n                this.dataProvider.inspectionData.data[roomIDForPic_1].data[itemIDForPic_1].images = {};\n                this.dataProvider.roomStructure[roomIDForPic_1].data.itemsObj[itemIDForPic_1].imageKeys = [];\n            }\n            var date = new Date();\n            var fileID = date.getTime();\n            var filename_1 = itemIDForPic_1 + '-' + this.auth.currentUser.username + fileID;\n            filename_1 = filename_1.split('/').join('_');\n            var thumb400Name_1 = filename_1 + '-thumb480.jpg';\n            var thumb800Name_1 = filename_1 + '-thumb768.jpg';\n            filename_1 = filename_1 + '.jpg';\n            var roomName = roomIDForPic_1;\n            roomName = roomName.split('/').join('_');\n            var unitName = this.dataProvider.inspectionData.propertyName;\n            unitName = unitName.split('/').join('_');\n            var inspectionName = this.dataProvider.inspectionData.name;\n            inspectionName = inspectionName.split('/').join('_');\n            var folder_1 = '/' + unitName + '/' + inspectionName + '/' + roomName;\n            var thumbFolder_1 = folder_1 + '/_thumbnails';\n            // So the idea here is that we upload the image from the device, then we start 3 processes in parallel\n            // 1) Create a share link for the original full size photo\n            // 2) Get Dropbox to create a 480px thumbnail, upload that thumbnail, and return the share link\n            // 3) Get Dropbox to create a 768px thumbnail, upload that thumbnail, and return the share link\n            // When those 3 processes are all done then the system should create the pic object in memory and add the db record with all links\n            this.dropbox.upload(filename_1, fileInput.target.files[0], folder_1)\n                .then(function (result) {\n                var fullSrcLinkPromise = _this.dropbox.createShareLink(folder_1 + '/' + filename_1);\n                var thumb400LinkPromise = _this.dropbox.filesGetThumbnail(folder_1 + '/' + filename_1, 'w640h480')\n                    .then(function (thumb400Response) {\n                    return _this.dropbox.upload(thumb400Name_1, thumb400Response.fileBlob, thumbFolder_1)\n                        .then(function (thumb400Upload) {\n                        return _this.dropbox.createShareLink(thumbFolder_1 + '/' + thumb400Name_1);\n                    });\n                });\n                var thumb800LinkPromise = _this.dropbox.filesGetThumbnail(folder_1 + '/' + filename_1, 'w1024h768')\n                    .then(function (thumb800Response) {\n                    return _this.dropbox.upload(thumb800Name_1, thumb800Response.fileBlob, thumbFolder_1)\n                        .then(function (thumb800Upload) {\n                        return _this.dropbox.createShareLink(thumbFolder_1 + '/' + thumb800Name_1);\n                    });\n                });\n                var currentVisitPromise = _this.dataProvider.createNewVisitOrReturnCurrent(_this.auth.currentUser.username);\n                return Promise.all([fullSrcLinkPromise, thumb400LinkPromise, thumb800LinkPromise, currentVisitPromise])\n                    .then(function (resultArray) {\n                    var newPic = {\n                        _id: new Date().getTime(),\n                        src: resultArray[0].url.split('www.dropbox').join('dl.dropboxusercontent'),\n                        thumb400: resultArray[1].url.split('www.dropbox').join('dl.dropboxusercontent'),\n                        thumb800: resultArray[2].url.split('www.dropbox').join('dl.dropboxusercontent'),\n                        fullpath: '/' + _this.auth.currentUser.username + folder_1 + '/' + filename_1\n                    };\n                    console.log('Got all dropbox image links. Full path to main image is: ' + newPic.fullpath);\n                    _this.dataProvider.roomStructure[roomIDForPic_1].data.itemsObj[itemIDForPic_1].imageKeys.unshift(newPic._id);\n                    _this.dataProvider.inspectionData.data[roomIDForPic_1].data[itemIDForPic_1].images[newPic._id] = newPic;\n                    fileInput.target.value = '';\n                    // We are going to directly create a db record for each image because images are the most resource intensive operation\n                    var newVisitItem = {\n                        images: {}\n                    };\n                    newVisitItem.images[newPic._id] = newPic;\n                    var roomList = [roomIDForPic_1];\n                    if (_this.metadata.applyToAll) {\n                        roomList = _this.dataProvider.findAllRooms(roomIDForPic_1, itemIDForPic_1);\n                    }\n                    var itemDataCopy = JSON.parse(JSON.stringify(newVisitItem));\n                    return _this.dataProvider.createNewVisitData(resultArray[3]._id, roomList, itemIDForPic_1, itemDataCopy)\n                        .then(function () {\n                        var itemName = _this.dataProvider.inspectionTemplate.data[roomIDForPic_1].data[itemIDForPic_1].Item;\n                        _this.invokeSavePopup(itemName);\n                        _this.showImageLoading.splice(-1);\n                        _this.cdRef.detectChanges();\n                        return newPic;\n                    })\n                        .catch(function (err) {\n                        var alert = _this.alertCtrl.create({\n                            title: 'Save failed',\n                            subTitle: 'Please try fully restarting the app and trying that input again',\n                            buttons: ['Dismiss']\n                        });\n                        alert.present();\n                    });\n                });\n            });\n        }\n    };\n    InspectionCreatorPage.prototype.naChoiceOnChange = function (checked) {\n        var _this = this;\n        this.zone.run(function () {\n            if (!_this.dataProvider.currentUnsavedItemData) {\n                _this.dataProvider.currentUnsavedItemData = {};\n            }\n            _this.dataProvider.currentUnsavedItemData.naChoice = checked;\n            if (checked) {\n                _this.dataProvider.currentUnsavedItemData.markSectionComplete = true;\n                _this.dataProvider.inspectionData.data[_this.metadata.currentRoomID].data[_this.metadata.selectedItem._id].markSectionComplete = true;\n                _this.metadata.saveCurrentItem(_this.metadata.currentRoomID, _this.metadata.selectedItem._id);\n            }\n            _this.dataProvider.inspectionData.data[_this.metadata.currentRoomID].data[_this.metadata.selectedItem._id].naChoice = checked;\n        });\n    };\n    InspectionCreatorPage.prototype.commentsOnBlur = function (newText) {\n        if (!this.dataProvider.currentUnsavedItemData) {\n            this.dataProvider.currentUnsavedItemData = {};\n        }\n        this.dataProvider.currentUnsavedItemData.mergedComments = newText;\n        this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n        this.cdRef.detectChanges();\n    };\n    // This method is unused now because we aren't using the camera plugin (html5 input for all devices now)\n    /*\n      addNewPic() {\n        let newPic = {\n          _id: new Date().getTime(),\n          thumb400: 'assets/img/test-pic2.jpg',\n          thumb800: 'assets/img/test-pic2.jpg',\n          src: 'assets/img/test-pic2.jpg'\n        };\n    \n        if (!this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id].images) {\n          this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id].images = {};\n          this.dataProvider.roomStructure[this.metadata.currentRoomID].data.itemsObj[this.metadata.selectedItem._id].imageKeys = [];\n        }\n    \n        if (this.camera) {\n          const cameraOptions: CameraOptions = {\n            quality: 50,\n            destinationType: this.camera.DestinationType.FILE_URI,\n            encodingType: this.camera.EncodingType.JPEG,\n            mediaType: this.camera.MediaType.PICTURE,\n            saveToPhotoAlbum: false,\n            correctOrientation: true\n          };\n          this.camera.getPicture(cameraOptions).then((imagePath) => {\n            // imageData is either a base64 encoded string or a file URI\n            // If it's base64:\n            //let base64Image = 'data:image/jpeg;base64,' + imageData;\n            console.log('Got camera file, location is: ' + imagePath);\n            newPic.thumb400 = imagePath;\n            newPic.thumb800 = imagePath;\n            newPic.src = imagePath;\n            this.dataProvider.roomStructure[this.metadata.currentRoomID].data.itemsObj[this.metadata.selectedItem._id].imageKeys.unshift(newPic._id);\n            this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id].images[newPic._id] = newPic;\n    \n             if (this.dataProvider.currentUnsavedItemData === null) {\n             this.dataProvider.currentUnsavedItemData = {images: {}};\n             }\n    \n             if (!this.dataProvider.currentUnsavedItemData.images) {\n             this.dataProvider.currentUnsavedItemData.images = {};\n             }\n    \n             this.dataProvider.currentUnsavedItemData.images[newPic._id] = newPic;\n             this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n    \n            this.cdRef.detectChanges();\n          }, (err) => {\n            // Handle error\n            console.error(err);\n          });\n        }\n      }\n    */\n    InspectionCreatorPage.prototype.markItemComplete = function (itemID) {\n        this.showTips = false;\n        this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[itemID].markSectionComplete = true;\n        //Example of creating new visit data doc after item is marked complete\n        if (!this.dataProvider.currentUnsavedItemData) {\n            this.dataProvider.currentUnsavedItemData = {};\n        }\n        this.dataProvider.currentUnsavedItemData.markSectionComplete = true;\n        this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n        var nextItem = null;\n        for (var index = 0; index < this.dataProvider.templateStructure[this.metadata.currentRoomID].itemsByTrade[this.metadata.currentTradeID].length; index++) {\n            var item = this.dataProvider.templateStructure[this.metadata.currentRoomID].itemsByTrade[this.metadata.currentTradeID][index];\n            if (item._id === itemID) {\n                nextItem = this.dataProvider.templateStructure[this.metadata.currentRoomID].itemsByTrade[this.metadata.currentTradeID][index + 1];\n                break;\n            }\n        }\n        if (nextItem === null || nextItem === undefined) {\n            nextItem = this.dataProvider.templateStructure[this.metadata.currentRoomID].itemsByTrade[this.metadata.currentTradeID][0];\n        }\n        // Passing true in order to skip saving\n        this.selectItem(nextItem, true);\n    };\n    // Need to see if the room exists in the roomStructure before we navigate to a room\n    // because roomStructure holds previously created visit data and it is also where we will databound current input.\n    // So if there isn't already previous visitData about a room then we need to create the object for the room to hold new data.\n    // Also need to do the same for the first item in the room\n    InspectionCreatorPage.prototype.showRoomEditor = function (roomID) {\n        var _this = this;\n        this.zone.run(function () {\n            var firstTradeIDNewRoom = _this.dataProvider.templateStructure[roomID].tradeIDs[0];\n            var firstItemInNewRoom = _this.dataProvider.templateStructure[roomID].itemsByTrade[firstTradeIDNewRoom][0];\n            _this.dataProvider.createItemStructIfNotExist(roomID, firstItemInNewRoom._id);\n            _this.metadata.currentRoomID = roomID;\n            _this.metadata.currentTradeID = firstTradeIDNewRoom;\n            _this.metadata.applyToAll = false;\n            _this.metadata.selectedItem = firstItemInNewRoom;\n            _this.showView = \"roomeditor\";\n            _this.dataProvider.inspectionData.data[_this.metadata.currentRoomID].data[_this.metadata.selectedItem._id].hospitalityRating += '';\n        });\n    };\n    // Need to see if the item exists in the roomStructure before we navigate to an item\n    // because roomStructure holds previously created visit data and it is also where we will databound current input.\n    // So if there isn't already previous visitData about a room then we need to create the object for the room to hold new data\n    InspectionCreatorPage.prototype.selectItem = function (item, skipSave) {\n        var _this = this;\n        this.zone.run(function () {\n            if (!skipSave) {\n                _this.metadata.saveCurrentItem(_this.metadata.currentRoomID, _this.metadata.selectedItem._id);\n            }\n            _this.showTips = false;\n            _this.dataProvider.createItemStructIfNotExist(_this.metadata.currentRoomID, item._id);\n            _this.metadata.applyToAll = false;\n            _this.metadata.selectedItem = item;\n            _this.content.scrollToTop(0);\n            _this.cdRef.detectChanges();\n        });\n    };\n    InspectionCreatorPage.prototype.selectConditionGroup = function (conditionGroupID) {\n        var _this = this;\n        this.zone.run(function () {\n            _this.metadata.saveCurrentItem(_this.metadata.currentRoomID, _this.metadata.selectedItem._id);\n        });\n    };\n    // Not using this function yet; but the idea is to great ready to store sub option data\n    /*\n     selectTypeConditionGroup(itemID, conditionID) {\n     if (typeof(this.typeConditionStructure[itemID]) === 'undefined') {\n     this.typeConditionStructure[itemID] = {};\n     }\n     if (typeof(this.typeConditionStructure[itemID][conditionID]) === 'undefined') {\n     this.typeConditionStructure[itemID][conditionID] = {};\n     }\n     }*/\n    InspectionCreatorPage.prototype.showRoomSelection = function () {\n        this.showView = \"roomselection\";\n        this.metadata.currentRoomID = '';\n        this.metadata.currentTradeIndex = 0;\n        this.cdRef.detectChanges();\n    };\n    InspectionCreatorPage.prototype.showPropertyInspection = function () {\n        this.navCtrl.pop();\n    };\n    InspectionCreatorPage.prototype.openPopover = function (myEvent) {\n        var popover = this.popoverCtrl.create(__WEBPACK_IMPORTED_MODULE_2__popovertrade_popovertrade__[\"a\" /* PopoverTradePage */], { metadata: this.metadata });\n        popover.present({\n            ev: myEvent\n        });\n    };\n    InspectionCreatorPage.prototype.openDatePopover = function (myEvent) {\n        var popover = this.popoverCtrl.create(__WEBPACK_IMPORTED_MODULE_3__popoverinsdate_popoverinsdate__[\"a\" /* PopoverinsdatePage */], {});\n        popover.present({\n            ev: myEvent\n        });\n    };\n    /**\n     * Removes all occurrences of forward slashes, spaces, and pound sign and any following numbers.\n     * This is because some characters are not allowed in file names.\n     * @param roomID Passed in from HTML.\n     * @returns {string} SRC for icon in assets\n     */\n    InspectionCreatorPage.prototype.getIconSrc = function (roomID) {\n        var cleanID = roomID.replace(/[\\/ ]+/g, '').toLowerCase();\n        if (cleanID.indexOf('#') > -1) {\n            cleanID = cleanID.substring(0, cleanID.indexOf('#'));\n        }\n        if (cleanID.indexOf('bathroom') > -1) {\n            cleanID = 'bathroom';\n        }\n        if (cleanID.indexOf('bedroom') > -1) {\n            cleanID = 'bedroom';\n        }\n        return 'assets/icon/' + cleanID + '.svg';\n    };\n    /**\n     * Shows and hides the TIPS section and toggles the arrow icon\n     */\n    InspectionCreatorPage.prototype.toggleTips = function () {\n        this.showTips = !this.showTips;\n        if (this.showTips) {\n            this.tipsIcon = 'ios-arrow-up';\n        }\n        else {\n            this.tipsIcon = 'ios-arrow-down';\n        }\n    };\n    /* Updates the inspectionData object with the textbox value and creates the subobject if necessary.\n     * @param event\n     * @param conditionID\n     * @param optionID\n     */\n    InspectionCreatorPage.prototype.updateOptionTextbox = function (event, conditionID, optionID) {\n        if (!this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['typesConditions'][conditionID]) {\n            this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['typesConditions'][conditionID] = {};\n        }\n        var dataCondition = this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['typesConditions'][conditionID];\n        if (this.dataProvider.currentUnsavedItemData === null) {\n            this.dataProvider.currentUnsavedItemData = {};\n        }\n        if (!dataCondition.optionID) {\n            // create object matching the template for the option\n            dataCondition[optionID] = {};\n        }\n        dataCondition[optionID]['textValue'] = event['target'].value;\n        if (!this.dataProvider.currentUnsavedItemData.typesConditions) {\n            this.dataProvider.currentUnsavedItemData.typesConditions = {};\n        }\n        if (!this.dataProvider.currentUnsavedItemData.typesConditions[conditionID]) {\n            this.dataProvider.currentUnsavedItemData.typesConditions[conditionID] = {};\n        }\n        if (!this.dataProvider.currentUnsavedItemData.typesConditions[conditionID][optionID]) {\n            this.dataProvider.currentUnsavedItemData.typesConditions[conditionID][optionID] = {};\n        }\n        this.dataProvider.currentUnsavedItemData.typesConditions[conditionID][optionID]['textValue'] = event['target'].value;\n        this.cdRef.detectChanges();\n        // If we wanted to save on every interaction, then uncomment below\n        //this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n    };\n    /**\n     * Needed because ternary ops eval to true in template and logic is long.\n     * Also clinical is the only one missing a typesConditions object.\n     * @param conditionID\n     * @param subOption\n     * @returns {boolean}\n     */\n    InspectionCreatorPage.prototype.subOptionHasData = function (conditionID, subOption) {\n        if (!this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['typesConditions'][conditionID]) {\n            return false;\n        }\n        else if (!this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['typesConditions'][conditionID][subOption['optionID']]) {\n            return false;\n        }\n        return true;\n    };\n    /** Updates the inspectionData object with the checkbox value and adds the template object if necessary.\n     * @param checked\n     * @param conditionID\n     * @param optionID\n     */\n    InspectionCreatorPage.prototype.checkboxTypeConditionOnSelect = function (checked, conditionID, optionID) {\n        var _this = this;\n        this.zone.run(function () {\n            if (!_this.dataProvider.inspectionData.data[_this.metadata.currentRoomID].data[_this.metadata.selectedItem._id]['typesConditions'][conditionID]) {\n                _this.dataProvider.inspectionData.data[_this.metadata.currentRoomID].data[_this.metadata.selectedItem._id]['typesConditions'][conditionID] = {};\n            }\n            var dataCondition = _this.dataProvider.inspectionData.data[_this.metadata.currentRoomID].data[_this.metadata.selectedItem._id]['typesConditions'][conditionID];\n            if (_this.dataProvider.currentUnsavedItemData === null) {\n                _this.dataProvider.currentUnsavedItemData = {};\n            }\n            if (!dataCondition.optionID) {\n                // create object matching the template for the option\n                dataCondition[optionID] = {};\n            }\n            dataCondition[optionID]['checkboxValue'] = checked;\n            if (!_this.dataProvider.currentUnsavedItemData.typesConditions) {\n                _this.dataProvider.currentUnsavedItemData.typesConditions = {};\n            }\n            if (!_this.dataProvider.currentUnsavedItemData.typesConditions[conditionID]) {\n                _this.dataProvider.currentUnsavedItemData.typesConditions[conditionID] = {};\n            }\n            if (!_this.dataProvider.currentUnsavedItemData.typesConditions[conditionID][optionID]) {\n                _this.dataProvider.currentUnsavedItemData.typesConditions[conditionID][optionID] = {};\n            }\n            _this.dataProvider.currentUnsavedItemData.typesConditions[conditionID][optionID]['checkboxValue'] = checked;\n            // If we wanted to save on every interaction, then uncomment below\n            //this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n        });\n    };\n    // checkboxTypeConditionOnSelect(conditionID, optionID,checkboxValue) {\n    //   console.log(conditionID, optionID,checkboxValue);\n    // }\n    InspectionCreatorPage.prototype.replacementTimelineOnSelect = function (timelineValue) {\n        // console.log(timelineValue);\n        if (!this.dataProvider.currentUnsavedItemData) {\n            this.dataProvider.currentUnsavedItemData = {};\n        }\n        if (!this.dataProvider.currentUnsavedItemData.inspectionWorkTrackingConditions) {\n            this.dataProvider.currentUnsavedItemData.inspectionWorkTrackingConditions = {};\n        }\n        this.dataProvider.currentUnsavedItemData.inspectionWorkTrackingConditions.selection = timelineValue;\n        // If we wanted to save on every interaction, then uncomment below\n        //this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n        this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['inspectionWorkTrackingConditions']['selection'] = timelineValue;\n        this.cdRef.detectChanges();\n    };\n    InspectionCreatorPage.prototype.invokeSavePopup = function (itemName) {\n        var toast = this.toast.create({\n            message: itemName + ' was saved',\n            duration: 3000,\n            position: 'top',\n        });\n        toast.present();\n    };\n    InspectionCreatorPage.prototype.hospOnSelect = function (hospValue) {\n        var _this = this;\n        this.zone.run(function () {\n            // console.log(hospValue);\n            if (!_this.dataProvider.currentUnsavedItemData) {\n                _this.dataProvider.currentUnsavedItemData = {};\n            }\n            _this.dataProvider.currentUnsavedItemData.hospitalityRating = hospValue;\n            // If we wanted to save on every interaction, then uncomment below\n            //this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n        });\n    };\n    InspectionCreatorPage.prototype.setHospValue = function (newValue) {\n        this.hospOnSelect(newValue);\n        this.dataProvider.inspectionData.data[this.metadata.currentRoomID].data[this.metadata.selectedItem._id]['hospitalityRating'] = newValue;\n    };\n    return InspectionCreatorPage;\n}());\n__decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"])(__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"b\" /* Content */]),\n    __metadata(\"design:type\", __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"b\" /* Content */])\n], InspectionCreatorPage.prototype, \"content\", void 0);\nInspectionCreatorPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-inspectioncreator',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/inspectioncreator/inspectioncreator.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main\">\\n  <ion-grid\\n    *ngIf=\"(dataProvider.inspectionTemplate.roomOrder)&&(dataProvider.inspectionTemplate.data)&&(dataProvider.hospitalityStructure.chartColors)\">\\n    <ion-row class=\"page-nav\">\\n      <ion-col col-6>\\n        <p>\\n          <a *ngIf=\"showView === \\'roomselection\\'\"\\n             (click)=\"showPropertyInspection()\"\\n             class=\"clickable-element\">\\n            <h2 class=\"page-header\">{{unit.name}}</h2>\\n        <p class=\"negative-margin inspector\">\\n          <ion-icon name=\"arrow-back\"></ion-icon>\\n          Change unit\\n        </p>\\n\\n        </a>\\n        <a *ngIf=\"showView === \\'roomeditor\\'\"\\n           (click)=\"showRoomSelection()\"\\n           class=\"clickable-element\">\\n          <h2 class=\"page-header\">{{unit.name}}</h2>\\n\\n        </a>\\n        </p>\\n\\n      </ion-col>\\n      <ion-col col-6 class=\"text-align-left\">\\n        <p class=\"label\">Inspection</p>\\n        <button *ngIf=\"dataProvider.inspectionObjList.data && dataProvider.inspectionObjList.data.length > 0\"\\n                class=\"popover-menu\"\\n                (click)=\"openDatePopover($event)\">\\n          <span>\\n            {{dataProvider.inspectionObjList.data[0].name}}\\n          </span>\\n          <ion-icon name=\"ios-arrow-down\"></ion-icon>\\n        </button>\\n      </ion-col>\\n    </ion-row>\\n    <!--Room list view-->\\n    <ng-container *ngIf=\"showView === \\'roomselection\\'\">\\n      <ion-row *ngIf=\"dataProvider.inspectionTemplate.roomOrder\">\\n        <ng-container *ngIf=\"dataProvider.inspectionTemplate.roomOrder.length > 0\">\\n          <ion-col col-6 col-sm-4 col-md-3\\n                   *ngFor=\"let roomID of dataProvider.inspectionTemplate.roomOrder\">\\n            <ion-card class=\"choose-room \" (click)=\"showRoomEditor(roomID)\" tappable>\\n              <ion-card-header>\\n\\n                <h3>\\n                  <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[roomID]\">\\n                    {{dataProvider.inspectionTemplate.roomAliases[roomID]}}\\n                  </span>\\n                  <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[roomID]\">\\n                    {{roomID}}\\n                  </span>\\n                </h3>\\n                <p>\\n                  {{dataProvider.templateStructure[roomID].tradeIDs.length}}\\n                  <span class=\"label\">Categories</span>\\n                </p>\\n                <p>\\n                  {{dataProvider.templateStructure[roomID].items.length}}\\n                  <span class=\"label\">Inspection Items</span>\\n                </p>\\n              </ion-card-header>\\n              <ion-card-content *ngIf=\"dataProvider.templateStructure[roomID]\">\\n\\n                <img src=\"{{getIconSrc(roomID)}}\" alt=\"room name\"/>\\n              </ion-card-content>\\n            </ion-card>\\n          </ion-col>\\n        </ng-container>\\n      </ion-row>\\n    </ng-container>\\n    <!--End of room list view-->\\n    <!--Room editor view-->\\n    <ng-container *ngIf=\"showView === \\'roomeditor\\'\">\\n      <ion-row class=\"sub page-nav\">\\n        <ion-col col-6>\\n          <a *ngIf=\"showView === \\'roomeditor\\'\"\\n             (click)=\"showRoomSelection()\"\\n             class=\"clickable-element\"\\n             tappable>\\n            <h2 class=\"page-header\">\\n              <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[metadata.currentRoomID]\">\\n                {{dataProvider.inspectionTemplate.roomAliases[metadata.currentRoomID]}}   <ion-icon name=\"ios-arrow-down\"></ion-icon>\\n              </span>\\n              <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[metadata.currentRoomID]\">\\n                {{metadata.currentRoomID}}   <ion-icon name=\"ios-arrow-down\"></ion-icon>\\n              </span>\\n            </h2>\\n            <p class=\"negative-margin\">\\n              Change Room</p>\\n          </a>\\n        </ion-col>\\n        <ion-col col-6 class=\"text-align-left margin-top-fix\">\\n          <p class=\"label\">CATEGORY</p>\\n          <button class=\"popover-menu\" (click)=\"openPopover($event)\">\\n            {{metadata.currentTradeID}} <ion-icon name=\"ios-arrow-down\"></ion-icon>\\n\\n          </button>\\n        </ion-col>\\n\\n      </ion-row>\\n      <ion-row *ngIf=\"metadata.loadCompleted\">\\n        <ion-col col-12 col-md-2>\\n          <ion-list class=\"report-builder\">\\n            <p\\n              *ngFor=\"let item of dataProvider.templateStructure[metadata.currentRoomID].itemsByTrade[metadata.currentTradeID]\"\\n              (click)=\"selectItem(item)\"\\n              [ngClass]=\"{\\'current\\': metadata.selectedItem._id === item._id, \\'completed\\': dataProvider.inspectionData.data[metadata.currentRoomID]?.data[item._id]?.markSectionComplete }\"\\n              [attr.color]=\"dataProvider.inspectionData.data[metadata.currentRoomID]?.data[item._id]?.markSectionComplete ? \\'secondary\\' : null\">\\n              <ion-icon *ngIf=\"dataProvider.inspectionData.data[metadata.currentRoomID]?.data[item._id]?.markSectionComplete\" name=\"checkmark-circle\"></ion-icon>\\n              {{item.Item}}\\n            </p>\\n          </ion-list>\\n        </ion-col>\\n        <ion-col col-12 col-md-9 offset-md-1>\\n          <ion-row tappable (click)=\"toggleTips()\" align-items-center>\\n            <ion-col col-6>\\n              <h2>{{metadata.selectedItem.Item}} <ion-icon name=\"{{tipsIcon}}\"></ion-icon>\\n              </h2>\\n            </ion-col>\\n            <ion-col col-6>\\n\\n            </ion-col>\\n          </ion-row>\\n          <ion-row class=\"hidden-row-rules\">\\n          <ion-col>\\n            <div class=\"tips-rules\">\\n              <p *ngIf=\"showTips\" class=\"appearing-tips\">{{metadata.selectedItem[\\'TIPS\\']}}</p>\\n              <div *ngIf=\"metadata.selectedItem[\\'Rules\\']\" class=\"company-rules\">\\n                <ion-icon name=\"alert\"></ion-icon>\\n                <p>{{metadata.selectedItem[\\'Rules\\']}}</p>\\n              </div>\\n            </div>\\n            </ion-col>\\n          </ion-row>\\n          <!-- Kim requested just to enable this on surfaces to start -->\\n          <ion-row *ngIf=\"metadata.selectedItem[\\'Trade or Service\\'] === \\'Surfaces\\'\" class=\"question-answer-block\">\\n            <ion-col class=\"question-block\">\\n              <ion-checkbox [(ngModel)]=\"metadata.applyToAll\"></ion-checkbox>\\n                <ion-label>Apply same information below for {{metadata.selectedItem.Item.toLowerCase()}} in all rooms</ion-label>\\n            </ion-col>\\n          </ion-row>\\n\\n          <ion-row class=\"question-answer-block\">\\n            <ion-col class=\"question-block\">\\n              <ion-checkbox #naChk\\n                            [(ngModel)]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'naChoice\\']\"\\n                            (ngModelChange)=\"naChoiceOnChange(naChk.checked)\">\\n              </ion-checkbox>\\n                <ion-label>Not in unit</ion-label>\\n            </ion-col>\\n          </ion-row>\\n\\n          <!--TODO new pic slides-->\\n          <div [ngClass]=\"{\\'not-in-property\\': dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'naChoice\\']}\">\\n          <ion-row >\\n            <ion-col col-12>\\n              <ion-slides *ngIf=\"dataProvider.roomStructure[metadata.currentRoomID].data.itemsObj[metadata.selectedItem._id]?.imageKeys?.length\"\\n                          pager slidesPerView=\"3\" spaceBetween=\"5px\">\\n                <ng-container *ngFor=\"let imageID of dataProvider.roomStructure[metadata.currentRoomID].data.itemsObj[metadata.selectedItem._id].imageKeys\">\\n                  <ion-slide *ngIf=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id].images[imageID].thumb400 && dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id].images[imageID].thumb800\">\\n                    <img width=\"100%\" height=\"auto\"\\n                         [src]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id].images[imageID].thumb400\"/>\\n                  </ion-slide>\\n                </ng-container>\\n              </ion-slides>\\n            </ion-col>\\n            <!-- Can use this code to conditional use the camera plugin or the html5 input if we want to go back to that split method -->\\n            <!--<ion-col *ngIf=\"!(plt.is(\\'mobileweb\\')) && !(plt.is(\\'core\\'))\" (click)=\"addNewPic()\">\\n              <ion-item tappable>\\n                <div class=\"add-picture\">\\n                  <ion-icon name=\"camera\"></ion-icon>\\n                  <p class=\"label\">+ Add Picture</p>\\n                </div>\\n              </ion-item>\\n            </ion-col>\\n            <ion-col *ngIf=\"(plt.is(\\'mobileweb\\')) || (plt.is(\\'core\\'))\">-->\\n            <!-- Right now though we use the html5 input method on all devices -->\\n            <ion-col>\\n              <span>Add pictures:</span>\\n              <input type=\"file\" accept=\"image/*\" (change)=\"imageFileInputChanged($event)\">\\n              <ng-container *ngFor=\"let spin of showImageLoading\">\\n                <ion-spinner></ion-spinner>\\n              </ng-container>\\n            </ion-col>\\n          </ion-row>\\n          <ion-row>\\n            <ion-col>\\n              <ion-label>Comments</ion-label>\\n              <textarea type=\"text\"\\n                            [(ngModel)]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id].mergedComments\"\\n                            (blur)=\"commentsOnBlur($event.target.value)\">\\n              </textarea>\\n            </ion-col>\\n          </ion-row>\\n          <ion-row>\\n            <ion-col>\\n              <ion-row align-items-center class=\"low-padding\" *ngFor=\"let conditionID of dataProvider.templateStructure.typeConditionsByItemID[metadata.selectedItem._id]\">\\n                <ion-col col-12>\\n                  <ion-row>\\n                    <ion-col col-md-3 col-6>\\n                      <ion-label>{{conditionID}}</ion-label>\\n                      <!--show if typeConditionStructure[metadata.selectedItem._id+conditionID] has value-->\\n                      <ion-segment *ngIf=\"(typeConditionStructure[metadata.selectedItem._id+conditionID]) && (conditionID !== \\'Qualitative\\') && (conditionID !== \\'Subjective\\')\"\\n                                   [(ngModel)]=\"typeConditionStructure[metadata.selectedItem._id+conditionID]\"\\n                                   color=\"secondary\"\\n                                   (click)=\"selectConditionGroup(conditionID)\">\\n                        <ion-segment-button value=\"Yes\">Show</ion-segment-button>\\n                        <ion-segment-button value=\"No\">Hide</ion-segment-button>\\n                      </ion-segment>\\n                      <!--show if typeConditionStructure[metadata.selectedItem._id+conditionID] is undefined-->\\n                      <ion-segment *ngIf=\"(!typeConditionStructure[metadata.selectedItem._id+conditionID]) && (conditionID !== \\'Qualitative\\') && (conditionID !== \\'Subjective\\')\"\\n                                   color=\"secondary\"\\n                                   (click)=\"selectConditionGroup(conditionID)\">\\n                        <ion-segment-button (ionSelect)=\"typeConditionStructure[metadata.selectedItem._id+conditionID] = \\'Yes\\'\" value=\"Yes\">Show</ion-segment-button>\\n                        <ion-segment-button (ionSelect)=\"typeConditionStructure[metadata.selectedItem._id+conditionID] = \\'No\\'\" value=\"No\">Hide</ion-segment-button>\\n                      </ion-segment>\\n                    </ion-col>\\n                  </ion-row>\\n                  <div class=\"yes-open\" *ngIf=\"(typeConditionStructure[metadata.selectedItem._id+conditionID] && typeConditionStructure[metadata.selectedItem._id+conditionID] === \\'Yes\\') || (conditionID === \\'Qualitative\\') || (conditionID === \\'Subjective\\')\">\\n                    <ion-row class=\"question-answer-block\" *ngFor=\"let optionGroup of dataProvider.inspectionTemplate.typesConditions[conditionID].options\">\\n                      <ion-col class=\"question-block\" *ngFor=\"let subOption of optionGroup\">\\n                        <ng-container *ngIf=\"subOptionHasData(conditionID, subOption); else elseBlock\">\\n                            <ion-checkbox #tpChk\\n                              (ngModelChange)=\"checkboxTypeConditionOnSelect(tpChk.checked, conditionID, subOption[\\'optionID\\'])\" color=\"secondary\"\\n                              *ngIf=\"subOption.hasCheckbox\"\\n                              [(ngModel)]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'typesConditions\\'][conditionID][subOption[\\'optionID\\']][\\'checkboxValue\\']\">\\n                            </ion-checkbox>\\n                          <label>\\n                            <ion-label [ngClass]=\"{\\'subgroup-label\\': subOption.isLabel}\">{{subOption.optionName}}</ion-label>\\n                            <input (blur)=\"updateOptionTextbox($event, conditionID, subOption[\\'optionID\\'])\"\\n                                       [(ngModel)]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'typesConditions\\'][conditionID][subOption[\\'optionID\\']][\\'textValue\\']\"\\n                                       *ngIf=\"subOption.hasText\" type=\"text\" placeholder=\"{{subOption.optionName}}\">\\n                          </label>\\n                        </ng-container>\\n                        <ng-template #elseBlock>\\n                          <ion-checkbox #tpChk2\\n                                        color=\"secondary\"\\n                                        *ngIf=\"subOption.hasCheckbox\"\\n                                        (click)=\"checkboxTypeConditionOnSelect(tpChk2.checked, conditionID, subOption[\\'optionID\\'])\"></ion-checkbox>\\n                          <label>\\n                            <ion-label [ngClass]=\"{\\'subgroup-label\\': subOption.isLabel}\">{{subOption.optionName}}</ion-label>\\n                            <input *ngIf=\"subOption.hasText\" type=\"text\" placeholder=\"{{subOption.optionName}}\"\\n                                       (blur)=\"updateOptionTextbox($event, conditionID, subOption[\\'optionID\\'])\">\\n                          </label>\\n                        </ng-template>\\n                      </ion-col>\\n                    </ion-row>\\n                    <ion-segment *ngIf=\"(conditionID !== \\'Qualitative\\') && (conditionID !== \\'Subjective\\')\"\\n                                 class=\"close-button\"\\n                                 [(ngModel)]=\"typeConditionStructure[metadata.selectedItem._id+conditionID]\"\\n                                 color=\"secondary\"\\n                                 (ngModelChange)=\"selectConditionGroup(conditionID)\">\\n                      <ion-segment-button value=\"No\">Close</ion-segment-button>\\n                    </ion-segment>\\n                  </div>\\n                </ion-col>\\n              </ion-row>\\n\\n\\n              <!-- I don\\'t think we\\'ll use dropdowns, but here are example styles in case -->\\n              <!--<ion-row>\\n                <ion-col>\\n                  <ion-label>Color/Finish</ion-label>\\n                  <ion-select [(ngModel)]=\"finish\">\\n                    <ion-option value=\"gold\">Gold</ion-option>\\n                    <ion-option value=\"platinum\">Platinum</ion-option>\\n                  </ion-select>\\n                  <ion-label>Material Grade</ion-label>\\n                  <ion-select [(ngModel)]=\"mat-grade\">\\n                    <ion-option value=\"gold\">Good</ion-option>\\n                    <ion-option value=\"platinum\">Best</ion-option>\\n                  </ion-select>\\n                </ion-col>\\n              </ion-row>-->\\n\\n\\n              <ion-row align-items-center>\\n                <ion-col>\\n                  <ion-label>Replacement Timeline</ion-label>\\n                  <ion-segment [(ngModel)]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'inspectionWorkTrackingConditions\\'][\\'selection\\']\"\\n                               class=\"replacement\"\\n                               (ngModelChange)=\"replacementTimelineOnSelect($event)\">\\n                    <ion-segment-button *ngFor=\"let timelineID of dataProvider.templateStructure[\\'timelineKeys\\']\"\\n                                        value=\"{{dataProvider.inspectionTemplate[\\'inspectionWorkTrackingConditions\\'].data[timelineID]._id}}\">\\n                      {{dataProvider.inspectionTemplate[\\'inspectionWorkTrackingConditions\\'].data[timelineID].name}}\\n                      <span class=\"label\">{{dataProvider.inspectionTemplate[\\'inspectionWorkTrackingConditions\\'].data[timelineID]._id}}</span>\\n                    </ion-segment-button>\\n                  </ion-segment>\\n                </ion-col>\\n              </ion-row>\\n\\n              <ion-row align-items-center>\\n                <ion-col>\\n                  <ion-label>Hospitality Rating</ion-label>\\n                  <!--shown if there is a hospitalityRating-->\\n                  <ion-segment\\n                    *ngIf=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'hospitalityRating\\']\"\\n                    [(ngModel)]=\"dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'hospitalityRating\\']\"\\n                    (ngModelChange)=\"hospOnSelect($event)\"\\n                    color=\"secondary\">\\n                    <ng-container *ngFor=\"let number of [\\'1\\',\\'2\\',\\'3\\',\\'4\\',\\'5\\',\\'6\\',\\'7\\',\\'8\\',\\'9\\',\\'10\\']\">\\n                      <ion-segment-button\\n                        value=\"{{number}}\">\\n                        {{number}}\\n                      </ion-segment-button>\\n                    </ng-container>\\n                  </ion-segment>\\n                  <!--show if there is no hospitalityRating-->\\n                  <ion-segment\\n                    *ngIf=\"!dataProvider.inspectionData.data[metadata.currentRoomID].data[metadata.selectedItem._id][\\'hospitalityRating\\']\"\\n                    color=\"secondary\">\\n                    <ng-container *ngFor=\"let number of [\\'1\\',\\'2\\',\\'3\\',\\'4\\',\\'5\\',\\'6\\',\\'7\\',\\'8\\',\\'9\\',\\'10\\']\">\\n                      <ion-segment-button\\n                        (ionSelect)=\"setHospValue(number)\"\\n                        value=\"{{number}}\">\\n                        {{number}}\\n                      </ion-segment-button>\\n                    </ng-container>\\n                  </ion-segment>\\n                  <p class=\"hospitality label left\">Economy</p>\\n                  <p class=\"hospitality label right\">Luxury</p>\\n                </ion-col>\\n              </ion-row>\\n              <!--<ion-row class=\"question-answer-block\" tappable>-->\\n                <!--<ion-col class=\"question-block\">-->\\n                  <!--&lt;!&ndash;TODO removed till wired up&ndash;&gt;-->\\n                  <!--<ion-checkbox></ion-checkbox>-->\\n                  <!--<ion-label>Flag for special review</ion-label>-->\\n                <!--</ion-col>-->\\n              <!--</ion-row>-->\\n              <ion-row>\\n                <ion-col>\\n                  <button class=\"full\" ion-button color=\"secondary\"\\n                          (click)=\"markItemComplete(metadata.selectedItem._id)\">\\n                    Complete\\n                  </button>\\n                </ion-col>\\n              </ion-row>\\n            </ion-col>\\n          </ion-row>\\n        </div>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row *ngIf=\"!metadata.loadCompleted\"><ion-spinner></ion-spinner></ion-row>\\n    </ng-container>\\n    <!--End of room editor view-->\\n  </ion-grid>\\n  <span\\n    *ngIf=\"!((dataProvider.inspectionTemplate.roomOrder)&&(dataProvider.inspectionTemplate.data)&&(dataProvider.hospitalityStructure.chartColors))\"\\n    class=\"content-max-width header-padding\">\\n    <ion-spinner></ion-spinner>\\n  </span>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/inspectioncreator/inspectioncreator.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"k\" /* PopoverController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"i\" /* NavParams */], __WEBPACK_IMPORTED_MODULE_4__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"] /*, public camera: Camera*/, __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"j\" /* Platform */], __WEBPACK_IMPORTED_MODULE_5__providers_auth_service__[\"a\" /* AuthService */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgZone\"], __WEBPACK_IMPORTED_MODULE_6__providers_dropbox_dropbox__[\"a\" /* DropboxProvider */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"m\" /* ToastController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"a\" /* AlertController */]])\n], InspectionCreatorPage);\n\n//# sourceMappingURL=inspectioncreator.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/inspectioncreator/inspectioncreator.ts\n// module id = 228\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/inspectioncreator/inspectioncreator.ts");

/***/ }),

/***/ 229:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PopoverTradePage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__providers_data__ = __webpack_require__(18);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\nvar PopoverTradePage = (function () {\n    function PopoverTradePage(navCtrl, viewCtrl, navParams, dataProvider) {\n        this.navCtrl = navCtrl;\n        this.viewCtrl = viewCtrl;\n        this.navParams = navParams;\n        this.dataProvider = dataProvider;\n        this.metadata = {};\n    }\n    PopoverTradePage.prototype.ngOnInit = function () {\n        var metadata = this.navParams.get('metadata');\n        if (typeof (metadata) !== 'undefined') {\n            this.metadata = metadata;\n        }\n    };\n    PopoverTradePage.prototype.selectTrade = function (tradeID) {\n        for (var index = 0; index < this.dataProvider.templateStructure[this.metadata.currentRoomID].tradeIDs.length; index++) {\n            var thisTradeID = this.dataProvider.templateStructure[this.metadata.currentRoomID].tradeIDs[index];\n            if (thisTradeID === tradeID) {\n                this.metadata.saveCurrentItem(this.metadata.currentRoomID, this.metadata.selectedItem._id);\n                var firstItemInSelectedTrade = this.dataProvider.templateStructure[this.metadata.currentRoomID].itemsByTrade[tradeID][0];\n                this.dataProvider.createItemStructIfNotExist(this.metadata.currentRoomID, firstItemInSelectedTrade._id);\n                // This is commented out because I thought I might have to set the in-memory store this way for all items but maybe not\n                /*let roomIDs = this.dataProvider.findAllRooms(this.metadata.currentRoomID, firstItemInSelectedTrade._id);\n                let justItemWithoutRoom = firstItemInSelectedTrade._id.split(roomIDs[0] + '|').join('');\n        \n                for (let roomID of roomIDs) {\n                  let itemInRoom = roomID + '|' + justItemWithoutRoom;\n                  this.dataProvider.createItemStructIfNotExist(roomID, itemInRoom);\n                }*/\n                // This is how to influence the inspection creator component UI\n                this.metadata.currentTradeIndex = index;\n                this.metadata.currentTradeID = tradeID;\n                this.metadata.applyToAll = false;\n                this.metadata.selectedItem = firstItemInSelectedTrade;\n                break;\n            }\n        }\n    };\n    PopoverTradePage.prototype.close = function () {\n        this.viewCtrl.dismiss();\n    };\n    return PopoverTradePage;\n}());\nPopoverTradePage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        template: \"\\n    <ion-list>\\n      <button ion-item\\n              *ngFor=\\\"let tradeID of dataProvider.templateStructure[metadata.currentRoomID].tradeIDs\\\"\\n              (click)=\\\"selectTrade(tradeID);close()\\\">\\n                {{tradeID}}\\n      </button>\\n    </ion-list>\\n  \"\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"n\" /* ViewController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"i\" /* NavParams */], __WEBPACK_IMPORTED_MODULE_2__providers_data__[\"a\" /* Data */]])\n], PopoverTradePage);\n\n//# sourceMappingURL=popovertrade.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/popovertrade/popovertrade.ts\n// module id = 229\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/popovertrade/popovertrade.ts");

/***/ }),

/***/ 261:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AdminPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__providers_data__ = __webpack_require__(18);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nvar AdminPage = (function () {\n    function AdminPage(navCtrl, navParams, loadingCtrl, dataProvider, alertCtrl) {\n        this.navCtrl = navCtrl;\n        this.navParams = navParams;\n        this.loadingCtrl = loadingCtrl;\n        this.dataProvider = dataProvider;\n        this.alertCtrl = alertCtrl;\n        this.newUnit = {\n            name: '',\n            unitTemplateIndex: 0\n        };\n    }\n    AdminPage.prototype.ionViewDidLoad = function () {\n    };\n    AdminPage.prototype.presentAlert = function (alertMsg) {\n        var alert = this.alertCtrl.create({\n            title: 'Warning!',\n            subTitle: alertMsg,\n            buttons: ['OK']\n        });\n        alert.present();\n    };\n    AdminPage.prototype.saveNewUnit = function () {\n        var _this = this;\n        console.log('Attempting to save new unit');\n        if (this.newUnit.name.trim() !== '') {\n            var loading_1 = this.loadingCtrl.create({\n                content: 'Saving, please wait....'\n            });\n            loading_1.present();\n            // Passing undefined for inspection name to get one created automatically\n            // Note that the variable returned for success is an array called results, there will be a returned Unit and a returned Inspection\n            var newUnitObj = { name: this.newUnit.name, unitTemplate: this.dataProvider.templateChoices[this.newUnit.unitTemplateIndex] };\n            this.dataProvider.createNewUnit(newUnitObj, undefined)\n                .then(function (results) {\n                console.log('Saved new Unit+Inspection');\n                _this.newUnit.name = '';\n                _this.newUnit.unitTemplateIndex = 0;\n                loading_1.dismiss();\n            })\n                .catch(function (err) {\n                if (err.status === 409 && err.message === 'Document update conflict') {\n                    _this.presentAlert('This unit already exists!');\n                    _this.newUnit.name = '';\n                }\n                console.error('Failed to save new unit or inspection');\n                loading_1.dismiss();\n            });\n        }\n    };\n    ;\n    return AdminPage;\n}());\nAdminPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-admin',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/admin/admin.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main\">\\n  <ion-grid *ngIf=\"dataProvider.templateChoices\">\\n    <ion-row class=\"page-nav\">\\n      <ion-col>\\n        <h2 class=\"page-header\">Admin</h2>\\n        <p class=\"negative-margin\">Add units and manage settings</p>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row class=\"page-nav\">\\n      <ion-col>\\n        <h3>Create Unit</h3>\\n          <ion-label>Type of unit</ion-label>\\n        <select [(ngModel)]=\"newUnit.unitTemplateIndex\">\\n          <option *ngFor=\"let choice of dataProvider.templateChoices; let i=index\"\\n                  [ngValue]=\"i\">\\n            {{choice.displayName}}\\n          </option>\\n        </select>\\n        <!-- For some reason the ion controls are completely messed up now with change detection, better to avoid and use plain Angular -->\\n          <!--<ion-select [(ngModel)]=\"newUnit.unitTemplateIndex\" name=\"unitTemplate\">\\n            <ion-option *ngFor=\"let choice of dataProvider.templateChoices; let i=index\" value=\"{{i}}\">\\n              {{choice.displayName}}\\n            </ion-option>\\n          </ion-select>-->\\n            <ion-label>Unit Name</ion-label>\\n            <ion-input [(ngModel)]=\"newUnit.name\" name=\"unitName\"></ion-input>\\n        <button ion-button color=\"secondary\" (click)=\"saveNewUnit()\">\\n          Complete\\n        </button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n  <span\\n    *ngIf=\"!dataProvider.templateChoices\">\\n    <ion-spinner></ion-spinner>\\n  </span>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/admin/admin.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"i\" /* NavParams */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"f\" /* LoadingController */], __WEBPACK_IMPORTED_MODULE_2__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"a\" /* AlertController */]])\n], AdminPage);\n\n//# sourceMappingURL=admin.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/admin/admin.ts\n// module id = 261\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/admin/admin.ts");

/***/ }),

/***/ 27:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export User */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AuthService; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__ = __webpack_require__(227);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_catch__ = __webpack_require__(453);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_catch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_catch__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_throw__ = __webpack_require__(455);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_throw___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_add_observable_throw__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ionic_storage__ = __webpack_require__(223);\n// This auth code and login component built from https://devdactic.com/login-ionic-2/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\n\nvar rememberedUserString = 'rememberedUser';\nvar rememberedUserCredString = 'rememberedUserCred';\nvar User = (function () {\n    function User(name, username, credential) {\n        this.name = name;\n        this.username = username;\n        this.credential = credential;\n    }\n    return User;\n}());\n\nvar AuthService = (function () {\n    function AuthService(http, storage) {\n        this.http = http;\n        this.storage = storage;\n        this.currentUser = null;\n        this.authServerString = 'https://marsi-envoy.herokuapp.com';\n        this.authURLPath = '/_auth';\n        this.logoutURLPath = '/_logout';\n    }\n    AuthService.prototype.attemptRememberedLogin = function () {\n        var _this = this;\n        return this.storage.get(rememberedUserString)\n            .then(function (username) {\n            if (username) {\n                return _this.storage.get(rememberedUserCredString)\n                    .then(function (credential) {\n                    console.log('Successful login for remembered user');\n                    _this.currentUser = { name: '', username: username, credential: credential };\n                    return true;\n                });\n            }\n        })\n            .catch(function () {\n            return false;\n        });\n    };\n    AuthService.prototype.login = function (credentials) {\n        var _this = this;\n        if (credentials.username === null || credentials.password === null) {\n            return __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"].throw(\"Please insert credentials\");\n        }\n        else {\n            var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"a\" /* Headers */]({ 'Authorization': 'Basic ' + btoa(credentials.username + ':' + credentials.password) });\n            var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"d\" /* RequestOptions */]({ headers: headers });\n            return this.http.get(this.authServerString + this.authURLPath, options)\n                .map(function (resp) {\n                if (resp.status === 200) {\n                    _this.currentUser = new User('', credentials.username, credentials.password);\n                    console.log('Successful login');\n                    if (credentials.rememberMe) {\n                        _this.storage.set(rememberedUserString, credentials.username);\n                        _this.storage.set(rememberedUserCredString, credentials.password);\n                    }\n                    return true;\n                }\n            })\n                .catch(function (error) {\n                var errMsg;\n                if (error instanceof __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"e\" /* Response */]) {\n                    if (error.status === 403) {\n                        errMsg = 'This username/password could not be verified; please try again';\n                    }\n                    else {\n                        var body = error.json() || '';\n                        var err = body.error || JSON.stringify(body);\n                        errMsg = error.status + \" - \" + (error.statusText || '') + \" \" + err;\n                    }\n                }\n                else {\n                    errMsg = error.message ? error.message : error.toString();\n                }\n                console.error(errMsg);\n                return __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"].throw(errMsg);\n            });\n        }\n    };\n    // This is commented out because we don't allow registration yet\n    /*public register(credentials) {\n      if (credentials.username === null || credentials.password === null) {\n        return Observable.throw(\"Please insert credentials\");\n      } else {\n        // At this point store the credentials to your backend!\n        return Observable.create(observer => {\n          observer.next(true);\n          observer.complete();\n        });\n      }\n    }*/\n    AuthService.prototype.getUserInfo = function () {\n        return this.currentUser;\n    };\n    AuthService.prototype.logout = function () {\n        this.storage.remove(rememberedUserString);\n        this.storage.remove(rememberedUserCredString);\n        this.currentUser = null;\n        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"a\" /* Headers */]({ 'Content-Type': 'application/json' });\n        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"d\" /* RequestOptions */]({ headers: headers, withCredentials: true });\n        return this.http.get(this.authServerString + this.logoutURLPath, options)\n            .map(function (resp) {\n            console.log('Successful logout');\n            return true;\n        })\n            .catch(function (error) {\n            var errMsg;\n            if (error instanceof __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"e\" /* Response */]) {\n                var body = error.json() || '';\n                var err = body.error || JSON.stringify(body);\n                errMsg = error.status + \" - \" + (error.statusText || '') + \" \" + err;\n            }\n            else {\n                errMsg = error.message ? error.message : error.toString();\n            }\n            console.error(errMsg);\n            return __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"].throw(errMsg);\n        });\n    };\n    return AuthService;\n}());\nAuthService = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"])(),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1__angular_http__[\"b\" /* Http */], __WEBPACK_IMPORTED_MODULE_6__ionic_storage__[\"b\" /* Storage */]])\n], AuthService);\n\n//# sourceMappingURL=auth-service.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/providers/auth-service.ts\n// module id = 27\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/providers/auth-service.ts");

/***/ }),

/***/ 379:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PrintPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reportcreator_reportcreator__ = __webpack_require__(132);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__providers_data__ = __webpack_require__(18);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nvar PrintPage = (function () {\n    function PrintPage(navCtrl, navParams, dataProvider) {\n        this.navCtrl = navCtrl;\n        this.navParams = navParams;\n        this.dataProvider = dataProvider;\n        // In case print component is opened without being passed report data\n        this.ownerReport = {};\n        this.unit = {\n            _id: '',\n            name: '',\n            unitTemplate: {\n                displayName: ''\n            }\n        };\n        this.doughnutChartSettings = {\n            options: {\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                },\n                cutoutPercentage: \"75\"\n            }\n        };\n    }\n    PrintPage.prototype.ionViewDidLoad = function () {\n        var ownerReport = this.navParams.get('ownerReport');\n        if ((typeof (ownerReport) !== 'undefined') && (typeof (ownerReport.roomObjList) !== 'undefined')) {\n            this.ownerReport = ownerReport;\n        }\n        var unit = this.navParams.get('unit');\n        if ((typeof (unit) !== 'undefined') && (typeof (unit._id) !== 'undefined')) {\n            this.unit = unit;\n        }\n        var htmlClassNames = document.documentElement.className;\n        if (htmlClassNames.trim() === '') {\n            document.documentElement.className = 'print-control';\n        }\n        else {\n            document.documentElement.className = htmlClassNames + ' print-control';\n        }\n    };\n    PrintPage.prototype.clickBack = function () {\n        var htmlClassNames = document.documentElement.className;\n        document.documentElement.className = htmlClassNames.split('print-control').join('');\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_2__reportcreator_reportcreator__[\"a\" /* ReportCreatorPage */], { ownerReport: this.ownerReport, unit: this.unit, roomID: 'PROJECTS' }, { animate: true, direction: 'backward' });\n    };\n    return PrintPage;\n}());\nPrintPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-print',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/print/print.html\"*/'\\n\\n<ion-content padding class=\"printlayout\">\\n  <ion-grid>\\n    <ion-row class=\"page-nav  \">\\n      <ion-col>\\n        <button (click)=\"clickBack()\" class=\"hide-on-print\">Back</button>\\n        <h2 class=\"page-header mymarsi\">{{ownerReport.unitName}} - {{unit.unitTemplate.displayName}}</h2>\\n        <p class=\"inspector\">Inspector: Kim Scott<br>Inspection Date: {{dataProvider.inspectionData.name}}</p>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row >\\n      <ion-col col-12>\\n        <img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\">\\n        <h2 class=\"mymarsi\">About MyMARSi&#8482;</h2>\\n        <h4>Maintenance Assessment Reporting System - Interface </h4>\\n        <p>As a home management service we collaborate with owners and managers to honestly assess both victories and quality failures so that they can get the most out of their vacation rental properties without sacrificing their investment or integrity.\\n          Together we can help owners stay competitive and current by offering discoverable insight with actionable, easy to follow timelines with prioritized maintenance projects giving them the peace of mind to focus on their investment without sacrificing\\n          their integrity collaborate with you to achieve a competitive and up-to-date interior. It’s not just about making sure the condo has necessary interior amenities, but that those amenities meet the standards guests require of you. Owners who\\n          meet rental-ready standards earn a MyMARSi™ seal of approval. This branding gives guests confidence that a property’s visual online representation is equal to its’ true appeal.\\n        </p>\\n\\n        <p>MyMARSi™ keeps condo owners informed of unit status and takes the guesswork out of solving problems that arise. The inspection ensures a qualified person checks every aspect of your condo from doorknobs to dishwashers, linens to light fixtures.\\n          Each issue is graded based on the urgency of the project. Together, we create a scalable plan to suit improvement needs and timing.\\n        </p>\\n\\n        <p>Our inspectors are professional tradesmen who use an advanced reporting interface to perform detailed inspections. Our reports are easy-to-read summaries of the inspection that include actionable information such as the prioritized project timeline.\\n          <p>\\n\\n            <div class=\"page-break\">&nbsp;</div>\\n\\n      </ion-col>\\n    </ion-row>\\n    <ion-row >\\n      <ion-col col-12>\\n\\n        <h2>How To Use This Report</h2>\\n\\n<p>In your report you receive two scores. Your Cumulative Hospitality Score identifies the current status of your unit as it relates to the quality assurance standards. The Room-specific Hospitality Scores helps you realize which areas of your unit need the most attention.</p>\\n\\n<p>The first section of your report summarizes the results of the inspection. Within the summary there are five categories of compliance ranging from Urgent (needing immediate attention) to Zen (need only scheduled maintenance or upkeep).\\n</p>\\n<img src=\"assets/img/timeline-explanation.jpg\" alt=\"Timeline Explanation\" class=\"center\">\\n<p>In this report, we highlighted your unit’s victories and areas of improvement. This is a easy-to-read overview of the key inspection results. </p>\\n<p>For an actionable summary of recommended improvements, visit the Projects Worth Starting section.  This section includes estimated costs and recommended vendor types. </p>\\n<p>The detailed room-by-room reports walk owners through the unit and describe the features and functionality through the eyes of a guest or property manager. </p>\\n\\n\\n\\n      </ion-col>\\n    </ion-row>\\n    <div class=\"page-break\">&nbsp;</div>\\n    <ion-row >\\n      <ion-col col-12>\\n\\n        <h2>How the timeline works: Priority + Timeline = Comfort Level</h2>\\n      <h3>&lt; 30 Days<span class=\"label\">Priority :  Urgent |  Comfort Level : Safety\\n</span></h3>\\n      <p>Items in this area are considered urgent or have potential to become urgent if not addressed within the next 30 days. Generally these are maintenance items that get resolved rather quickly by you, your vendors or your property manager\\'s maintenance department.</p>\\n<h3>&lt; 6 months<span class=\"label\">Priority :  Serious |  Comfort Level : Quality of Life\\n </span></h3>\\n<p>Items in this area are considered serious or have potential to become serious if not addressed within the next 6 months or 180 days.Generally these are items that may need coordinating with a property services vendor in order to schedule and get done.\\n</p>\\n<h3>&lt; 1 Year<span class=\"label\">Priority :  Immediate |  Comfort Level : Fragility\\n </span></h3>\\n<p>Items in this area are considered immediate or have potential to become immediate if not addressed within the next year or 365 days. Generally these are items that may require planning, budgeting or special ordering in order to get them done.  You may also have a maximum deadline agreement in place for maintaining property standards to remain in your property manager\\'s program.</p>\\n<h3>&lt; 2 years<span class=\"label\">Priority :  Delayed |  Comfort Level : Comfortability\\n </span></h3>\\n<p>Items in this area are considered delayed and are considered not to be of concern in the immediate future if maintained well or installed correctly. If you see items here it could be needing some attention in the near future, essentially these items are on a watch list for maintenance or replacement.</p>\\n<h3>2+ Years<span class=\"label\">Priority :  Zen |  Comfort Level : Hospitality\\n </span></h3>\\n<p>Items in this area are considered Zen and are considered not to be of concern in the next to years if maintained well or installed correctly. Relax, kickback and give yourself a pat on the back.  Enjoy a job well done you\\'ve made the most out of staying competitive and made your guests and property manager very happy!</p>\\n\\n\\n      </ion-col>\\n    </ion-row>\\n      <div class=\"page-break\">&nbsp;</div>\\n\\n    <ion-row >\\n      <ion-col col-6>\\n        <h2 >Overall</h2>\\n        <p>{{ownerReport.unitSummary}}</p>\\n\\n\\n      </ion-col>\\n      <ion-col col-5 offset-1 class=\"donut-side\">\\n        <div class=\"graph\">\\n          <canvas baseChart\\n                  [data]=\"[(dataProvider.hospitalityStructure.sum / dataProvider.hospitalityStructure.count),(10- (dataProvider.hospitalityStructure.sum / dataProvider.hospitalityStructure.count))]\"\\n                  [chartType]=\"\\'doughnut\\'\"\\n                  [colors]=\"dataProvider.hospitalityStructure.chartColors\"\\n                  [options]=\"doughnutChartSettings.options\"></canvas>\\n                  <div class=\"inside-donut\">\\n                    <h2>\\n                      {{ dataProvider.hospitalityStructure.intPortion }}<span class=\"decimals\">{{ dataProvider.hospitalityStructure.remainderPortion }}</span>\\n                      <span class=\"label\">Unit Hospitality Score</span>\\n                    </h2>\\n                  </div>\\n        </div>\\n        <div class=\"text-center-align\">\\n\\n          <h3>\\n            {{dataProvider.issueStructure._itemsInspectedCount}} <span class=\"label\">Items Inspected</span>\\n          </h3>\\n          <h2 class=\"replacement-header\">Timeline</h2>\\n          <ng-container *ngFor=\"let issueID of dataProvider.issueStructure[\\'_keys\\']\">\\n            <ng-container *ngIf=\"dataProvider.issueStructure[issueID].count\">\\n              <p class=\"large-number\">{{ dataProvider.issueStructure[issueID].count }}</p>\\n              <p class=\"label\">{{issueID}}<span>{{ dataProvider.issueStructure[issueID].timelineText }}</span></p>\\n            </ng-container>\\n          </ng-container>\\n        </div>\\n      </ion-col>\\n\\n\\n    </ion-row>\\n    <div class=\"page-break\">&nbsp;</div>\\n    <ion-row >\\n      <ion-col>\\n        <ion-row>\\n          <h2>Highlights</h2>\\n          <p>Below are the victories and quality failures. The victories are areas where your unit meets or exceeds property minimum standards or expectations. The quality failures are areas of improvements as they may not meet currently property minimum standards or expectations. </p>\\n          <ion-col col-5 offset-1>\\n\\n            <h3 >Victories</h3>\\n            <ng-container *ngFor=\"let victory of ownerReport.victoriesList\">\\n              <ion-row *ngIf=\"!victory.removeMe\">\\n                <ion-col col-2>\\n                  <ion-icon name=\"medal\"></ion-icon>\\n                </ion-col>\\n                <ion-col col-9 offset-1>\\n                  {{victory.text}}\\n                </ion-col>\\n              </ion-row>\\n          </ng-container>\\n          </ion-col>\\n          <ion-col col-5 offset-1>\\n            <h3>Quality Failures</h3>\\n            <ng-container *ngFor=\"let failure of ownerReport.failuresList\">\\n              <ion-row *ngIf=\"!failure.removeMe\">\\n                <ion-col col-2>\\n                  <ion-icon name=\"warning\"></ion-icon>\\n                </ion-col>\\n                <ion-col col-9 offset-1>\\n                  {{failure.text}}\\n                </ion-col>\\n              </ion-row>\\n            </ng-container>\\n          </ion-col>\\n        </ion-row>\\n\\n    </ion-col>\\n    </ion-row >\\n    <div class=\"page-break\">&nbsp;</div>\\n        <ion-row >\\n          <ion-col>\\n        <ion-row >\\n          <ion-col col-12>\\n            <h2>Room Hospitality Scores</h2>\\n            <h4>All hospitality scores are on a 1-10 scale, with 10 being the most desirable</h4>\\n            <p><span class=\"red\">Red</span> indicates a score 0-3.3</p>\\n              <p><span class=\"blue\">Blue</span> indicates a score 3.4-6.6</p>\\n              <p><span class=\"green\">Green</span> indicates a score 6.7-10</p>\\n          </ion-col>\\n          <ion-col col-3 *ngFor=\"let roomObj of ownerReport.roomObjList\">\\n\\n            <h3 class=\"room-name\">\\n              <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[roomObj.name]\">\\n                {{dataProvider.inspectionTemplate.roomAliases[roomObj.name]}}\\n              </span>\\n              <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[roomObj.name]\">\\n                {{roomObj.name}}\\n              </span>\\n            </h3>\\n\\n              <canvas baseChart\\n                      [data]=\"[(dataProvider.roomStructure[roomObj.name].data.hospitalitySum / dataProvider.roomStructure[roomObj.name].data.hospitalityCount),(10- (dataProvider.roomStructure[roomObj.name].data.hospitalitySum / dataProvider.roomStructure[roomObj.name].data.hospitalityCount))]\"\\n                      [chartType]=\"\\'doughnut\\'\"\\n                      [colors]=\"dataProvider.roomStructure[roomObj.name].data.chartColors\"\\n                      [options]=\"doughnutChartSettings.options\"></canvas>\\n                        <div class=\"small-inside-donut\">\\n                {{ dataProvider.roomStructure[roomObj.name].data.hospitalityInt }}<span class=\"decimals\">{{ dataProvider.roomStructure[roomObj.name].data.hospitalityRemainder }}</span>\\n                <span class=\"label\">Room Hospitality Score</span>\\n\\n\\n            </div>\\n          </ion-col>\\n        </ion-row>\\n      </ion-col>\\n\\n    </ion-row>\\n    <div class=\"page-break\">&nbsp;</div>\\n    <ion-row >\\n      <ion-col>\\n        <h3 >Projects Worth Starting</h3>\\n        <ng-container *ngFor=\"let projObj of ownerReport.projObjList\">\\n          <ion-row *ngIf=\"!projObj.removeMe\">\\n            <ion-col col-1>\\n              <ion-icon name=\"hammer\"></ion-icon>\\n            </ion-col>\\n            <ion-col col-11>\\n              <ion-row>{{projObj.description}}</ion-row>\\n              <ion-row>${{projObj.estimate.lower}} - ${{projObj.estimate.upper}}</ion-row>\\n            </ion-col>\\n          </ion-row>\\n        </ng-container>\\n      </ion-col>\\n\\n\\n    </ion-row>\\n    <div *ngFor=\"let roomObj of ownerReport.roomObjList\">\\n    <div class=\"page-break\">&nbsp;</div>\\n    <ion-row  >\\n      <ion-col col-6>\\n        <h2>\\n          <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[roomObj.name]\">\\n            {{dataProvider.inspectionTemplate.roomAliases[roomObj.name]}}\\n          </span>\\n          <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[roomObj.name]\">\\n            {{roomObj.name}}\\n          </span>\\n        </h2>\\n        <ng-container *ngIf=\"dataProvider.roomStructure[roomObj.name].data.flagsList.length > 0\">\\n          <ion-icon name=\"flag\" style=\"color:red;\"></ion-icon>\\n          {{dataProvider.roomStructure[roomObj.name].data.flagsList.join(\\', \\')}}\\n        </ng-container>\\n        <p>{{roomObj.summary}}</p>\\n        <ion-row>\\n          <ng-container *ngFor=\"let picObj of roomObj.selectedPicObjs\">\\n            <ion-col *ngIf=\"!picObj.removeMe\"\\n                     col-6>\\n              <img width=\"100%\" height=\"auto\" [src]=\"picObj.thumb800\" />\\n              <p>{{picObj.comment}}</p>\\n            </ion-col>\\n          </ng-container>\\n        </ion-row>\\n      </ion-col>\\n      <ion-col col-5 offset-1 class=\"donut-side\">\\n        <div class=\"graph\">\\n          <canvas baseChart\\n                  [data]=\"[(dataProvider.roomStructure[roomObj.name].data.hospitalitySum / dataProvider.roomStructure[roomObj.name].data.hospitalityCount),(10- (dataProvider.roomStructure[roomObj.name].data.hospitalitySum / dataProvider.roomStructure[roomObj.name].data.hospitalityCount))]\"\\n                  [chartType]=\"\\'doughnut\\'\"\\n                  [colors]=\"dataProvider.roomStructure[roomObj.name].data.chartColors\"\\n                  [options]=\"doughnutChartSettings.options\"></canvas>\\n                <div class=\"inside-donut\">\\n                  <h2>\\n                    {{ dataProvider.roomStructure[roomObj.name].data.hospitalityInt }}<span class=\"decimals\">{{ dataProvider.roomStructure[roomObj.name].data.hospitalityRemainder }}</span>\\n                    <span class=\"label\">Room Hospitality Score</span>\\n                  </h2>\\n                </div>\\n        </div>\\n        <div class=\"text-center-align\">\\n\\n          <!--<h3>Replacement Timeline</h3>-->\\n          <p class=\"large-number\">{{dataProvider.roomStructure[roomObj.name].data.itemList.length}}</p>\\n          <p class=\"label\">Items Inspected</p>\\n          <ng-container *ngFor=\"let timelineID of dataProvider.issueStructure[\\'_keys\\']\">\\n            <ng-container *ngIf=\"dataProvider.roomStructure[roomObj.name].data.issueTypeCounts[timelineID]\">\\n              <p class=\"large-number\" *ngIf=\"dataProvider.roomStructure[roomObj.name].data.issueTypeCounts[timelineID]\">\\n                {{dataProvider.roomStructure[roomObj.name].data.issueTypeCounts[timelineID]}}\\n              </p>\\n              <p class=\"label\">{{timelineID}}</p>\\n            </ng-container>\\n          </ng-container>\\n        </div>\\n      </ion-col>\\n\\n    </ion-row>\\n  </div>\\n  <div class=\"page-break\">&nbsp;</div>\\n  <ion-row >\\n    <ion-col col-12>\\n\\n      <h2 class=\"mymarsi\">FAQs</h2>\\n<h3>What are the quality assurance requirements?</h3>\\n<p>We worked with property managers to establish quality standards. The requirements are described in the Quality Assurance Compliance & Benchmarks document. The requirements outline expectations for Luxury, Deluxe, Standard, and Economy units.</p>\\n<h3>What gives a MyMARSi™ inspection credibility?</h3>\\n<p>The MyMARSi™ software is designed to rank a property on three levels: qualitative, subjective, and clinical. The inspections are performed by industry experts with 20+ years experience.</p>\\n<h3>What should I do with this report?</h3>\\n<p>Use the timeline to prioritize maintenance projects. Work with property managers to upgrade your unit. Call local contractors to discuss larger projects.</p>\\n<h3>Why is preventative maintenance important?</h3>\\n<p>By initiating a preventative maintenance inspection approach, our assessments provide valuable insight to the market.  S.M.A.R.T. vacation rental owners continually transform their investment properties to keep them visually appealing and comfortable – updated livable spaces that attract new guests and repeat business with ease!</p>\\n<h5>About this report</h5>\\n<p><small>This report is intended solely for information purposes and is not to be construed as any warranty. MyMARSi™ and the Inspector do not provide any warranty for the items identified in this report whatsoever. This report contains forward-looking statements and information, which reflect the current view with respect to future events and financial performance.  Actual results may differ materially from the expectations expressed or implied in the forward-looking statements as a result of known and unknown risks and uncertainties. MyMARSi™ and the Inspector take no responsibility or accept any liability for any loss or damage arising from decisions made as a result of information contained in our reports or services and urges its clients to make independent inquiries to satisfy themselves as to the accuracy or completeness of the information we provide. Any unauthorized disclosure, use, reproduction, or distribution of the descriptive, analytical or predictive information provided to you by MyMARSi™ in its reports or services is not permitted and MyMARSi™ reports and are protected by copyright.</small></p>\\n\\n\\n\\n    </ion-col>\\n  </ion-row>\\n\\n  </ion-grid>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/print/print.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"i\" /* NavParams */], __WEBPACK_IMPORTED_MODULE_3__providers_data__[\"a\" /* Data */]])\n], PrintPage);\n\n//# sourceMappingURL=print.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/print/print.ts\n// module id = 379\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/print/print.ts");

/***/ }),

/***/ 380:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Issuetypes; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reportlist_reportlist__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_auth_service__ = __webpack_require__(27);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\nvar Issuetypes = (function () {\n    function Issuetypes(navCtrl, navParams, popoverCtrl, dataProvider, auth, toast) {\n        this.navCtrl = navCtrl;\n        this.navParams = navParams;\n        this.popoverCtrl = popoverCtrl;\n        this.dataProvider = dataProvider;\n        this.auth = auth;\n        this.toast = toast;\n        this.unit = {\n            id: '',\n            name: ''\n        };\n        this.shownItemDetails = '';\n        this.inspectionData = this.dataProvider.inspectionData;\n        this.roomStructure = this.dataProvider.roomStructure;\n        this.inspectionTemplate = this.dataProvider.inspectionTemplate;\n        this.issueStructure = this.dataProvider.issueStructure;\n        this.inspectionObjList = this.dataProvider.inspectionObjList;\n    }\n    Issuetypes.prototype.ionViewDidLoad = function () {\n        var unit = this.navParams.get('unit');\n        if (typeof (unit) !== 'undefined') {\n            this.unit = unit;\n        }\n    };\n    Issuetypes.prototype.toggleItemDetails = function (itemID) {\n        if (this.isItemDetailShown(itemID)) {\n            this.shownItemDetails = '';\n        }\n        else {\n            this.shownItemDetails = itemID;\n        }\n    };\n    ;\n    Issuetypes.prototype.isItemDetailShown = function (itemID) {\n        return this.shownItemDetails === itemID;\n    };\n    ;\n    Issuetypes.prototype.showAdminDataPage = function () {\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_2__reportlist_reportlist__[\"a\" /* ReportListPage */], {\n            unit: this.unit,\n            noInspectionLoad: true\n        }, { animate: true, direction: 'backward' });\n    };\n    Issuetypes.prototype.invokeSavePopup = function (message) {\n        var toast = this.toast.create({\n            message: message,\n            duration: 3000,\n            position: 'top',\n        });\n        toast.present();\n    };\n    Issuetypes.prototype.toggleItemFlag = function (roomID, itemID, itemName, addFlag) {\n        console.log(roomID, itemID, itemName, addFlag);\n        if (!this.dataProvider.currentUnsavedItemData) {\n            this.dataProvider.currentUnsavedItemData = {};\n        }\n        if (addFlag) {\n            console.log('added flag to structures');\n            this.dataProvider.issueStructure._flagsList.push(itemID);\n            this.dataProvider.roomStructure[roomID].data.flagsList.push(itemName);\n        }\n        else {\n            console.log('removing flag from structures');\n            this.dataProvider.issueStructure._flagsList.splice(this.dataProvider.issueStructure._flagsList.indexOf(itemID), 1);\n            this.dataProvider.roomStructure[roomID].data.flagsList.push(this.dataProvider.roomStructure[roomID].data.flagsList.indexOf(itemName), 1);\n        }\n        this.dataProvider.inspectionData.data[roomID].data[itemID].reportFlag = !this.dataProvider.inspectionData.data[roomID].data[itemID].reportFlag;\n        this.dataProvider.currentUnsavedItemData.reportFlag = this.dataProvider.inspectionData.data[roomID].data[itemID].reportFlag;\n        this.dataProvider.saveCurrentUnsavedItemData(this.auth.currentUser.username, [roomID], itemID);\n        this.invokeSavePopup(itemName + ' was saved in ' + roomID);\n    };\n    return Issuetypes;\n}());\nIssuetypes = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-issuetypes',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/issuetypes/issuetypes.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main\">\\n  <ion-grid>\\n    <ion-row class=\"page-nav\">\\n      <ion-col>\\n        <p class=\"breadcrumbs\">\\n          <a (click)=\"showAdminDataPage()\" class=\"clickable-element\">\\n            <ion-icon name=\"arrow-back\"></ion-icon> Overall Report</a>\\n        </p>\\n        <h2 class=\"page-header\">Issue Types</h2>\\n        <p class=\"inspector negative-margin\">Inspector Name</p>\\n      </ion-col>\\n    </ion-row>\\n\\n    <ion-row class=\"page-nav  \">\\n      <ion-col col-12>\\n        <h2>{{unit.name}}\\n        </h2>\\n      </ion-col>\\n\\n      <!-- If we need an inspection selector we can put it here (and set the ion-col above back to col-6 also) -->\\n      <!--<ion-col col-6 class=\"cta\">\\n        <button *ngIf=\"inspectionObjList.data && inspectionObjList.data.length > 0\" class=\"InspectionDates\" (click)=\"presentPopover($event)\">\\n          {{inspectionObjList.data[0].name}}\\n          <ion-icon name=\"ios-arrow-down\"></ion-icon>\\n\\n        </button>\\n      </ion-col>-->\\n    </ion-row>\\n\\n    <ion-row class=\"reporting-header\">\\n      <ion-col>\\n        <ion-row class=\"large-number\">\\n          <ion-col>\\n            <h2>{{ issueStructure._itemsInspectedCount }}<span class=\"label\">Items Inspected</span></h2>\\n          </ion-col>\\n          <ion-col>\\n            <h2>{{ dataProvider.issueStructure._flagsList.length }}<span class=\"label\">Items Flagged</span></h2>\\n          </ion-col>\\n          <ion-col>\\n            <h2>{{ issueStructure._total }}<span class=\"label\">Issues</span></h2>\\n          </ion-col>\\n        </ion-row>\\n        <ion-row>\\n\\n          <ion-col class=\"rating\" *ngFor=\"let issueID of issueStructure[\\'_keys\\']\">\\n            <h3 class=\"number\">\\n                {{ issueStructure[issueID].count }}<span class=\"label\">{{issueID}}</span>\\n              </h3>\\n            <span class=\"timeline label\">{{ issueStructure[issueID].timelineText }}</span>\\n          </ion-col>\\n        </ion-row>\\n      </ion-col>\\n    </ion-row>\\n\\n    <ng-container *ngFor=\"let issueID of issueStructure[\\'_keys\\']\">\\n    <ion-list class=\"gray-background\" *ngIf=\"issueStructure[issueID] && issueStructure[issueID].roomItemKeysObjs && issueStructure[issueID].roomItemKeysObjs.length\">\\n      <ion-row>\\n        <ion-col class=\"content-max-width room-list\">\\n          <ion-row>\\n            <h2>{{issueID}}</h2>\\n          </ion-row>\\n          <ion-row>\\n            <ion-col>\\n              <header class=\"flex-row\">\\n\\n                <div class=\"cell col1\">\\n                </div>\\n                <div class=\"cell col1\">\\n                </div>\\n                <div class=\"cell col2\">\\n                </div>\\n                <div class=\"cell col3\">\\n                  Rating\\n                </div>\\n                <div class=\"cell col4\">\\n                  Priority\\n                </div>\\n                <div class=\"cell col5\">\\n                  Comments\\n                </div>\\n                <div class=\"cell col6\">\\n                </div>\\n              </header>\\n              <ng-container *ngFor=\"let roomItemObj of issueStructure[issueID].roomItemKeysObjs\">\\n                <div class=\"flex-row clickable-element\"\\n                     *ngIf=\"inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].markSectionComplete && !inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].naChoice\"\\n                     text-wrap\\n                     (click)=\"toggleItemDetails(roomItemObj.itemID)\"\\n                     [ngClass]=\"{active: isItemDetailShown(roomItemObj.itemID)}\">\\n                     \\n                  <div class=\"cell col1\">\\n                    <ion-icon name=\"ios-alert\"\\n                              *ngIf=\"dataProvider.issueStructure[\\'_problemKeyDict\\'][inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].inspectionWorkTrackingConditions.selection]\">\\n                    </ion-icon>\\n                  </div>\\n                  <div class=\"cell col1\">\\n                    <ion-icon\\n                      name=\"flag\"\\n                      [ngStyle]=\"{\\'color\\':inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID][\\'reportFlag\\'] ? \\'red\\' : \\'gray\\' }\"\\n                      (click)=\"toggleItemFlag(roomItemObj.roomID, roomItemObj.itemID, inspectionTemplate.data[roomItemObj.roomID].data[roomItemObj.itemID].Item, !inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID][\\'reportFlag\\']); $event.stopPropagation()\">\\n                    </ion-icon>\\n                  </div>\\n                  <div class=\"cell col2\">\\n                    {{inspectionTemplate.data[roomItemObj.roomID].data[roomItemObj.itemID].Item}}\\n                  </div>\\n                  <div class=\"cell col3\">\\n                    {{inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].hospitalityRating}}\\n                  </div>\\n                  <div *ngIf=\"inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].inspectionWorkTrackingConditions\" class=\"cell col4\">\\n                    {{inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].inspectionWorkTrackingConditions.selection}}\\n                  </div>\\n                  <div class=\"cell col5\">\\n                    <!-- Note: need to rethink how to get comment keys on this page -->\\n                    <span *ngFor=\"let commentKey of roomItemObj.commentKeys\">\\n                  {{inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].comments[commentKey].text}}\\n              </span>\\n                  </div>\\n                  <div class=\"cell col6\">\\n                    <ion-icon color=\"success\" item-right [name]=\"isItemDetailShown(roomItemObj.itemID) ? \\'arrow-dropdown\\' : \\'arrow-dropright\\'\">\\n                    </ion-icon>\\n                  </div>\\n                  <ion-row class=\"details\" *ngIf=\"isItemDetailShown(roomItemObj.itemID)\">\\n\\n                    <!-- Commenting out this full-cell style for now, don\\'t think we will use it -->\\n                    <!--<div class=\"full-cell flex\">\\n                    <p><span class=\"label\">Type</span>Screen, Glass</p>\\n                  </div>-->\\n                    <ion-col col-12 col-md-6 *ngFor=\"let conditionObj of roomItemObj.typeConditionKeys\">\\n                      <p><strong>{{conditionObj._id}}</strong></p>\\n                      <ng-container *ngFor=\"let optionKey of conditionObj.optionKeys\">\\n                        <p *ngIf=\"inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].typesConditions[conditionObj._id][optionKey].checkboxValue || inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].typesConditions[conditionObj._id][optionKey].textValue\">\\n                          <span class=\"label\">{{ dataProvider.getOptionTemplateFromID(conditionObj._id, optionKey)?.subLabel }}</span> {{ dataProvider.getOptionTemplateFromID(conditionObj._id, optionKey)?.optionName }}\\n                          <span *ngIf=\"inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].typesConditions[conditionObj._id][optionKey].textValue\">\\n                        : {{ inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].typesConditions[conditionObj._id][optionKey].textValue }}\\n                      </span>\\n                        </p>\\n                      </ng-container>\\n                    </ion-col>\\n                    <ng-container *ngIf=\"roomItemObj.imageKeys.length > 0\">\\n                      <ng-container *ngFor=\"let imageID of roomItemObj.imageKeys\">\\n                        <ion-col col-6\\n                                 *ngIf=\"inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].images[imageID].thumb400 && inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].images[imageID].thumb800\">\\n                          <p>\\n                            <img width=\"100%\" height=\"auto\"\\n                                 [src]=\"inspectionData.data[roomItemObj.roomID].data[roomItemObj.itemID].images[imageID].thumb400\" />\\n                          </p>\\n                        </ion-col>\\n                      </ng-container>\\n                    </ng-container>\\n\\n                  </ion-row>\\n                </div>\\n              </ng-container>\\n            </ion-col>\\n          </ion-row>\\n        </ion-col>\\n      </ion-row>\\n    </ion-list>\\n    </ng-container>\\n\\n  </ion-grid>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/issuetypes/issuetypes.html\"*/,\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"i\" /* NavParams */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"k\" /* PopoverController */], __WEBPACK_IMPORTED_MODULE_3__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_4__providers_auth_service__[\"a\" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"m\" /* ToastController */]])\n], Issuetypes);\n\n//# sourceMappingURL=issuetypes.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/issuetypes/issuetypes.ts\n// module id = 380\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/issuetypes/issuetypes.ts");

/***/ }),

/***/ 381:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_platform_browser_dynamic__ = __webpack_require__(382);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_module__ = __webpack_require__(400);\n\n\nObject(__WEBPACK_IMPORTED_MODULE_0__angular_platform_browser_dynamic__[\"a\" /* platformBrowserDynamic */])().bootstrapModule(__WEBPACK_IMPORTED_MODULE_1__app_module__[\"a\" /* AppModule */]);\n//# sourceMappingURL=636402660299030000.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/main.ts\n// module id = 381\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/app/main.ts");

/***/ }),

/***/ 400:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AppModule; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_platform_browser__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_http__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ionic_storage__ = __webpack_require__(223);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ionic_native_camera__ = __webpack_require__(443);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__app_component__ = __webpack_require__(452);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__pages_inspectionlist_inspectionlist__ = __webpack_require__(120);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__pages_inspectioncreator_inspectioncreator__ = __webpack_require__(228);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__pages_popoverinsdate_popoverinsdate__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__pages_popovertrade_popovertrade__ = __webpack_require__(229);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__pages_propertyreporting_propertyreporting__ = __webpack_require__(131);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__pages_reportlist_reportlist__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__pages_reportcreator_reportcreator__ = __webpack_require__(132);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__pages_print_print__ = __webpack_require__(379);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__pages_admin_admin__ = __webpack_require__(261);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__pages_issuetypes_issuetypes__ = __webpack_require__(380);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__pages_login_login__ = __webpack_require__(226);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__providers_auth_service__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_ng2_charts_ng2_charts__ = __webpack_require__(570);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_ng2_charts_ng2_charts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_ng2_charts_ng2_charts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__providers_dropbox_dropbox__ = __webpack_require__(122);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//import { StatusBar } from '@ionic-native/status-bar';\n//import { SplashScreen } from '@ionic-native/splash-screen';\n\n\nvar AppModule = (function () {\n    function AppModule() {\n    }\n    return AppModule;\n}());\nAppModule = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"])({\n        declarations: [\n            __WEBPACK_IMPORTED_MODULE_6__app_component__[\"a\" /* MyApp */],\n            __WEBPACK_IMPORTED_MODULE_7__pages_inspectionlist_inspectionlist__[\"a\" /* InspectionListPage */],\n            __WEBPACK_IMPORTED_MODULE_8__pages_inspectioncreator_inspectioncreator__[\"a\" /* InspectionCreatorPage */],\n            __WEBPACK_IMPORTED_MODULE_11__pages_propertyreporting_propertyreporting__[\"a\" /* propertyReporting */],\n            __WEBPACK_IMPORTED_MODULE_14__pages_print_print__[\"a\" /* PrintPage */],\n            __WEBPACK_IMPORTED_MODULE_12__pages_reportlist_reportlist__[\"a\" /* ReportListPage */],\n            __WEBPACK_IMPORTED_MODULE_13__pages_reportcreator_reportcreator__[\"a\" /* ReportCreatorPage */],\n            __WEBPACK_IMPORTED_MODULE_15__pages_admin_admin__[\"a\" /* AdminPage */],\n            __WEBPACK_IMPORTED_MODULE_16__pages_issuetypes_issuetypes__[\"a\" /* Issuetypes */],\n            __WEBPACK_IMPORTED_MODULE_9__pages_popoverinsdate_popoverinsdate__[\"a\" /* PopoverinsdatePage */],\n            __WEBPACK_IMPORTED_MODULE_10__pages_popovertrade_popovertrade__[\"a\" /* PopoverTradePage */],\n            __WEBPACK_IMPORTED_MODULE_17__pages_login_login__[\"a\" /* LoginPage */]\n        ],\n        imports: [\n            __WEBPACK_IMPORTED_MODULE_0__angular_platform_browser__[\"a\" /* BrowserModule */],\n            __WEBPACK_IMPORTED_MODULE_20_ng2_charts_ng2_charts__[\"ChartsModule\"],\n            __WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"e\" /* IonicModule */].forRoot(__WEBPACK_IMPORTED_MODULE_6__app_component__[\"a\" /* MyApp */]),\n            __WEBPACK_IMPORTED_MODULE_2__angular_http__[\"c\" /* HttpModule */],\n            __WEBPACK_IMPORTED_MODULE_4__ionic_storage__[\"a\" /* IonicStorageModule */].forRoot()\n        ],\n        bootstrap: [__WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"c\" /* IonicApp */]],\n        entryComponents: [\n            __WEBPACK_IMPORTED_MODULE_6__app_component__[\"a\" /* MyApp */],\n            __WEBPACK_IMPORTED_MODULE_7__pages_inspectionlist_inspectionlist__[\"a\" /* InspectionListPage */],\n            __WEBPACK_IMPORTED_MODULE_8__pages_inspectioncreator_inspectioncreator__[\"a\" /* InspectionCreatorPage */],\n            __WEBPACK_IMPORTED_MODULE_11__pages_propertyreporting_propertyreporting__[\"a\" /* propertyReporting */],\n            __WEBPACK_IMPORTED_MODULE_14__pages_print_print__[\"a\" /* PrintPage */],\n            __WEBPACK_IMPORTED_MODULE_12__pages_reportlist_reportlist__[\"a\" /* ReportListPage */],\n            __WEBPACK_IMPORTED_MODULE_13__pages_reportcreator_reportcreator__[\"a\" /* ReportCreatorPage */],\n            __WEBPACK_IMPORTED_MODULE_15__pages_admin_admin__[\"a\" /* AdminPage */],\n            __WEBPACK_IMPORTED_MODULE_16__pages_issuetypes_issuetypes__[\"a\" /* Issuetypes */],\n            __WEBPACK_IMPORTED_MODULE_9__pages_popoverinsdate_popoverinsdate__[\"a\" /* PopoverinsdatePage */],\n            __WEBPACK_IMPORTED_MODULE_10__pages_popovertrade_popovertrade__[\"a\" /* PopoverTradePage */],\n            __WEBPACK_IMPORTED_MODULE_17__pages_login_login__[\"a\" /* LoginPage */]\n        ],\n        providers: [\n            __WEBPACK_IMPORTED_MODULE_18__providers_data__[\"a\" /* Data */],\n            __WEBPACK_IMPORTED_MODULE_19__providers_auth_service__[\"a\" /* AuthService */],\n            __WEBPACK_IMPORTED_MODULE_5__ionic_native_camera__[\"a\" /* Camera */],\n            //StatusBar,\n            //SplashScreen,\n            { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ErrorHandler\"], useClass: __WEBPACK_IMPORTED_MODULE_3_ionic_angular__[\"d\" /* IonicErrorHandler */] }, __WEBPACK_IMPORTED_MODULE_21__providers_dropbox_dropbox__[\"a\" /* DropboxProvider */]\n        ]\n    })\n], AppModule);\n\n//# sourceMappingURL=app.module.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.module.ts\n// module id = 400\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/app/app.module.ts");

/***/ }),

/***/ 452:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MyApp; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__pages_login_login__ = __webpack_require__(226);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pages_admin_admin__ = __webpack_require__(261);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__pages_inspectionlist_inspectionlist__ = __webpack_require__(120);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pages_propertyreporting_propertyreporting__ = __webpack_require__(131);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__providers_auth_service__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__providers_data__ = __webpack_require__(18);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n//import { StatusBar } from '@ionic-native/status-bar';\n//import { SplashScreen } from '@ionic-native/splash-screen';\n\n\n\n\n\n\n//import { AdminPage } from '../pages/admin/admin';\n// Uncomment this for deployment\n\nObject(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"enableProdMode\"])();\nvar MyApp = (function () {\n    function MyApp(platform, auth, dataProvider /*, public statusBar: StatusBar, public splashScreen: SplashScreen*/) {\n        this.platform = platform;\n        this.auth = auth;\n        this.dataProvider = dataProvider; /*, public statusBar: StatusBar, public splashScreen: SplashScreen*/\n        this.rootPage = __WEBPACK_IMPORTED_MODULE_2__pages_login_login__[\"a\" /* LoginPage */];\n        this.initializeApp();\n        // used for an example of ngFor and navigation\n        this.pages = [\n            { title: 'Inspections', component: __WEBPACK_IMPORTED_MODULE_4__pages_inspectionlist_inspectionlist__[\"a\" /* InspectionListPage */] },\n            { title: 'Reporting', component: __WEBPACK_IMPORTED_MODULE_5__pages_propertyreporting_propertyreporting__[\"a\" /* propertyReporting */] },\n        ];\n    }\n    MyApp.prototype.goToAdminPage = function () {\n        this.openPage({ title: 'Admin', component: __WEBPACK_IMPORTED_MODULE_3__pages_admin_admin__[\"a\" /* AdminPage */] });\n    };\n    MyApp.prototype.allowUser = function () {\n        return (this.auth.currentUser && (this.auth.currentUser.username.indexOf('Demo') == -1) && (this.auth.currentUser.username.indexOf('demo') == -1));\n    };\n    MyApp.prototype.initializeApp = function () {\n        /*this.platform.ready().then(() => {\n          // Okay, so the platform is ready and our plugins are available.\n          // Here you can do any higher level native things you might need.\n          this.statusBar.styleDefault();\n          //this.splashScreen.hide();\n        });*/\n    };\n    MyApp.prototype.openPage = function (page) {\n        // Reset the content nav to have just this page\n        // we wouldn't want the back button to show in this scenario\n        this.nav.setRoot(page.component);\n    };\n    MyApp.prototype.logout = function () {\n        this.dataProvider.resetAll();\n        this.auth.logout();\n        this.nav.setRoot(__WEBPACK_IMPORTED_MODULE_2__pages_login_login__[\"a\" /* LoginPage */]);\n    };\n    return MyApp;\n}());\n__decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewChild\"])(__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"g\" /* Nav */]),\n    __metadata(\"design:type\", __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"g\" /* Nav */])\n], MyApp.prototype, \"nav\", void 0);\nMyApp = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/app/app.html\"*/'<ion-split-pane class=\"obey-me print-hide\" >\\n<ion-menu [content]=\"content\" class=\"top-nav-fix\"  persistent=\"true\">\\n  <ion-content>\\n    <img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo\">\\n    <ion-list *ngIf=\"auth.currentUser != null\">\\n      <button menuClose ion-item *ngFor=\"let p of pages\" (click)=\"openPage(p)\">\\n        {{p.title}}\\n      </button>\\n      <button *ngIf=\"allowUser()\"\\n              menuClose ion-item (click)=\"goToAdminPage()\">\\n        Admin\\n      </button>\\n      <button menuClose ion-item (click)=\"logout()\">\\n        Logout\\n      </button>\\n    </ion-list>\\n  </ion-content>\\n\\n</ion-menu>\\n\\n<!-- Disable swipe-to-go-back because it\\'s poor UX to combine STGB with side menus -->\\n<ion-nav main [root]=\"rootPage\" #content swipeBackEnabled=\"false\" class=\"main-content\"></ion-nav>\\n</ion-split-pane>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/app/app.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"j\" /* Platform */], __WEBPACK_IMPORTED_MODULE_6__providers_auth_service__[\"a\" /* AuthService */], __WEBPACK_IMPORTED_MODULE_7__providers_data__[\"a\" /* Data */] /*, public statusBar: StatusBar, public splashScreen: SplashScreen*/])\n], MyApp);\n\n//# sourceMappingURL=app.component.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.ts\n// module id = 452\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/app/app.component.ts");

/***/ }),

/***/ 473:
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//////////////////\n// WEBPACK FOOTER\n// vertx (ignored)\n// module id = 473\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/vertx_(ignored)");

/***/ }),

/***/ 494:
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//////////////////\n// WEBPACK FOOTER\n// ./leveldown (ignored)\n// module id = 494\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/leveldown_(ignored)");

/***/ }),

/***/ 50:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PopoverinsdatePage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__providers_data__ = __webpack_require__(18);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n/*@Component({\n template: `\n <ion-list>\n <button ion-item\n *ngFor=\"let inspObj of inspectionObjList.data\"\n (click)=\"selectInspection(inspObj._id);close();\">{{inspObj.name}}</button>\n </ion-list>\n `\n })*/\nvar PopoverinsdatePage = (function () {\n    function PopoverinsdatePage(navCtrl, viewCtrl, dataProvider) {\n        this.navCtrl = navCtrl;\n        this.viewCtrl = viewCtrl;\n        this.dataProvider = dataProvider;\n        this.inspectionObjList = this.dataProvider.inspectionObjList;\n    }\n    PopoverinsdatePage.prototype.ngOnInit = function () {\n    };\n    PopoverinsdatePage.prototype.selectInspection = function (inspectionID) {\n        console.log('clicked inspection to select: ' + inspectionID);\n        if (this.dataProvider.inspectionData._id === inspectionID) {\n            console.log('but that inspection is already selected');\n        }\n        else {\n            console.log('different inspection, so need to load new data');\n        }\n    };\n    PopoverinsdatePage.prototype.close = function () {\n        this.viewCtrl.dismiss();\n    };\n    return PopoverinsdatePage;\n}());\nPopoverinsdatePage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        template: \"\\n    <ion-list>\\n      <button ion-item\\n              *ngIf=\\\"inspectionObjList.data && inspectionObjList.data.length > 0\\\"\\n              (click)=\\\"close();\\\">{{inspectionObjList.data[0].name}}\\n      </button>\\n    </ion-list>\\n  \"\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"n\" /* ViewController */], __WEBPACK_IMPORTED_MODULE_2__providers_data__[\"a\" /* Data */]])\n], PopoverinsdatePage);\n\n//# sourceMappingURL=popoverinsdate.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/popoverinsdate/popoverinsdate.ts\n// module id = 50\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/popoverinsdate/popoverinsdate.ts");

/***/ }),

/***/ 553:
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./af\": 264,\n\t\"./af.js\": 264,\n\t\"./ar\": 265,\n\t\"./ar-dz\": 266,\n\t\"./ar-dz.js\": 266,\n\t\"./ar-kw\": 267,\n\t\"./ar-kw.js\": 267,\n\t\"./ar-ly\": 268,\n\t\"./ar-ly.js\": 268,\n\t\"./ar-ma\": 269,\n\t\"./ar-ma.js\": 269,\n\t\"./ar-sa\": 270,\n\t\"./ar-sa.js\": 270,\n\t\"./ar-tn\": 271,\n\t\"./ar-tn.js\": 271,\n\t\"./ar.js\": 265,\n\t\"./az\": 272,\n\t\"./az.js\": 272,\n\t\"./be\": 273,\n\t\"./be.js\": 273,\n\t\"./bg\": 274,\n\t\"./bg.js\": 274,\n\t\"./bn\": 275,\n\t\"./bn.js\": 275,\n\t\"./bo\": 276,\n\t\"./bo.js\": 276,\n\t\"./br\": 277,\n\t\"./br.js\": 277,\n\t\"./bs\": 278,\n\t\"./bs.js\": 278,\n\t\"./ca\": 279,\n\t\"./ca.js\": 279,\n\t\"./cs\": 280,\n\t\"./cs.js\": 280,\n\t\"./cv\": 281,\n\t\"./cv.js\": 281,\n\t\"./cy\": 282,\n\t\"./cy.js\": 282,\n\t\"./da\": 283,\n\t\"./da.js\": 283,\n\t\"./de\": 284,\n\t\"./de-at\": 285,\n\t\"./de-at.js\": 285,\n\t\"./de-ch\": 286,\n\t\"./de-ch.js\": 286,\n\t\"./de.js\": 284,\n\t\"./dv\": 287,\n\t\"./dv.js\": 287,\n\t\"./el\": 288,\n\t\"./el.js\": 288,\n\t\"./en-au\": 289,\n\t\"./en-au.js\": 289,\n\t\"./en-ca\": 290,\n\t\"./en-ca.js\": 290,\n\t\"./en-gb\": 291,\n\t\"./en-gb.js\": 291,\n\t\"./en-ie\": 292,\n\t\"./en-ie.js\": 292,\n\t\"./en-nz\": 293,\n\t\"./en-nz.js\": 293,\n\t\"./eo\": 294,\n\t\"./eo.js\": 294,\n\t\"./es\": 295,\n\t\"./es-do\": 296,\n\t\"./es-do.js\": 296,\n\t\"./es.js\": 295,\n\t\"./et\": 297,\n\t\"./et.js\": 297,\n\t\"./eu\": 298,\n\t\"./eu.js\": 298,\n\t\"./fa\": 299,\n\t\"./fa.js\": 299,\n\t\"./fi\": 300,\n\t\"./fi.js\": 300,\n\t\"./fo\": 301,\n\t\"./fo.js\": 301,\n\t\"./fr\": 302,\n\t\"./fr-ca\": 303,\n\t\"./fr-ca.js\": 303,\n\t\"./fr-ch\": 304,\n\t\"./fr-ch.js\": 304,\n\t\"./fr.js\": 302,\n\t\"./fy\": 305,\n\t\"./fy.js\": 305,\n\t\"./gd\": 306,\n\t\"./gd.js\": 306,\n\t\"./gl\": 307,\n\t\"./gl.js\": 307,\n\t\"./gom-latn\": 308,\n\t\"./gom-latn.js\": 308,\n\t\"./he\": 309,\n\t\"./he.js\": 309,\n\t\"./hi\": 310,\n\t\"./hi.js\": 310,\n\t\"./hr\": 311,\n\t\"./hr.js\": 311,\n\t\"./hu\": 312,\n\t\"./hu.js\": 312,\n\t\"./hy-am\": 313,\n\t\"./hy-am.js\": 313,\n\t\"./id\": 314,\n\t\"./id.js\": 314,\n\t\"./is\": 315,\n\t\"./is.js\": 315,\n\t\"./it\": 316,\n\t\"./it.js\": 316,\n\t\"./ja\": 317,\n\t\"./ja.js\": 317,\n\t\"./jv\": 318,\n\t\"./jv.js\": 318,\n\t\"./ka\": 319,\n\t\"./ka.js\": 319,\n\t\"./kk\": 320,\n\t\"./kk.js\": 320,\n\t\"./km\": 321,\n\t\"./km.js\": 321,\n\t\"./kn\": 322,\n\t\"./kn.js\": 322,\n\t\"./ko\": 323,\n\t\"./ko.js\": 323,\n\t\"./ky\": 324,\n\t\"./ky.js\": 324,\n\t\"./lb\": 325,\n\t\"./lb.js\": 325,\n\t\"./lo\": 326,\n\t\"./lo.js\": 326,\n\t\"./lt\": 327,\n\t\"./lt.js\": 327,\n\t\"./lv\": 328,\n\t\"./lv.js\": 328,\n\t\"./me\": 329,\n\t\"./me.js\": 329,\n\t\"./mi\": 330,\n\t\"./mi.js\": 330,\n\t\"./mk\": 331,\n\t\"./mk.js\": 331,\n\t\"./ml\": 332,\n\t\"./ml.js\": 332,\n\t\"./mr\": 333,\n\t\"./mr.js\": 333,\n\t\"./ms\": 334,\n\t\"./ms-my\": 335,\n\t\"./ms-my.js\": 335,\n\t\"./ms.js\": 334,\n\t\"./my\": 336,\n\t\"./my.js\": 336,\n\t\"./nb\": 337,\n\t\"./nb.js\": 337,\n\t\"./ne\": 338,\n\t\"./ne.js\": 338,\n\t\"./nl\": 339,\n\t\"./nl-be\": 340,\n\t\"./nl-be.js\": 340,\n\t\"./nl.js\": 339,\n\t\"./nn\": 341,\n\t\"./nn.js\": 341,\n\t\"./pa-in\": 342,\n\t\"./pa-in.js\": 342,\n\t\"./pl\": 343,\n\t\"./pl.js\": 343,\n\t\"./pt\": 344,\n\t\"./pt-br\": 345,\n\t\"./pt-br.js\": 345,\n\t\"./pt.js\": 344,\n\t\"./ro\": 346,\n\t\"./ro.js\": 346,\n\t\"./ru\": 347,\n\t\"./ru.js\": 347,\n\t\"./sd\": 348,\n\t\"./sd.js\": 348,\n\t\"./se\": 349,\n\t\"./se.js\": 349,\n\t\"./si\": 350,\n\t\"./si.js\": 350,\n\t\"./sk\": 351,\n\t\"./sk.js\": 351,\n\t\"./sl\": 352,\n\t\"./sl.js\": 352,\n\t\"./sq\": 353,\n\t\"./sq.js\": 353,\n\t\"./sr\": 354,\n\t\"./sr-cyrl\": 355,\n\t\"./sr-cyrl.js\": 355,\n\t\"./sr.js\": 354,\n\t\"./ss\": 356,\n\t\"./ss.js\": 356,\n\t\"./sv\": 357,\n\t\"./sv.js\": 357,\n\t\"./sw\": 358,\n\t\"./sw.js\": 358,\n\t\"./ta\": 359,\n\t\"./ta.js\": 359,\n\t\"./te\": 360,\n\t\"./te.js\": 360,\n\t\"./tet\": 361,\n\t\"./tet.js\": 361,\n\t\"./th\": 362,\n\t\"./th.js\": 362,\n\t\"./tl-ph\": 363,\n\t\"./tl-ph.js\": 363,\n\t\"./tlh\": 364,\n\t\"./tlh.js\": 364,\n\t\"./tr\": 365,\n\t\"./tr.js\": 365,\n\t\"./tzl\": 366,\n\t\"./tzl.js\": 366,\n\t\"./tzm\": 367,\n\t\"./tzm-latn\": 368,\n\t\"./tzm-latn.js\": 368,\n\t\"./tzm.js\": 367,\n\t\"./uk\": 369,\n\t\"./uk.js\": 369,\n\t\"./ur\": 370,\n\t\"./ur.js\": 370,\n\t\"./uz\": 371,\n\t\"./uz-latn\": 372,\n\t\"./uz-latn.js\": 372,\n\t\"./uz.js\": 371,\n\t\"./vi\": 373,\n\t\"./vi.js\": 373,\n\t\"./x-pseudo\": 374,\n\t\"./x-pseudo.js\": 374,\n\t\"./yo\": 375,\n\t\"./yo.js\": 375,\n\t\"./zh-cn\": 376,\n\t\"./zh-cn.js\": 376,\n\t\"./zh-hk\": 377,\n\t\"./zh-hk.js\": 377,\n\t\"./zh-tw\": 378,\n\t\"./zh-tw.js\": 378\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 553;\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/moment/locale ^\\.\\/.*$\n// module id = 553\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/node_modules/moment/locale_^/.//.*$");

/***/ }),

/***/ 71:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ReportListPage; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reportcreator_reportcreator__ = __webpack_require__(132);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyreporting_propertyreporting__ = __webpack_require__(131);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__popoverinsdate_popoverinsdate__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__issuetypes_issuetypes__ = __webpack_require__(380);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__providers_data__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__providers_auth_service__ = __webpack_require__(27);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\n\n\n\nvar ReportListPage = (function () {\n    function ReportListPage(navCtrl, popoverCtrl, navParams, dataProvider, cdRef, auth, toast) {\n        this.navCtrl = navCtrl;\n        this.popoverCtrl = popoverCtrl;\n        this.navParams = navParams;\n        this.dataProvider = dataProvider;\n        this.cdRef = cdRef;\n        this.auth = auth;\n        this.toast = toast;\n        // In case the page is opened without a unit provided to the router\n        this.unit = {\n            _id: '',\n            name: ''\n        };\n        this.ownerReport = null;\n        this.topDoughnutChart = {\n            options: {\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                },\n                cutoutPercentage: \"70\"\n            }\n        };\n        this.roomDoughnutChart = {\n            colors: [{\n                    backgroundColor: [\n                        'rgba(254, 0, 0, 1)',\n                        'rgba(221, 221, 221, 1)'\n                    ],\n                    borderColor: [\n                        'rgba(254, 0, 0, 1)',\n                        'rgba(221, 221, 221, 1)'\n                    ]\n                }],\n            options: {\n                legend: {\n                    display: false\n                },\n                tooltips: {\n                    enabled: false\n                },\n                cutoutPercentage: \"75\"\n            }\n        };\n        this.shownItemDetails = '';\n    }\n    ReportListPage.prototype.ionViewDidLoad = function () {\n        var _this = this;\n        var checkOwnerReport = this.navParams.get('ownerReport');\n        if (typeof (checkOwnerReport) !== 'undefined') {\n            this.ownerReport = checkOwnerReport;\n        }\n        var noInspectionLoad = this.navParams.get('noInspectionLoad');\n        var unit = this.navParams.get('unit');\n        if ((typeof (unit) !== 'undefined') && (typeof (unit._id) !== 'undefined')) {\n            this.unit = unit;\n            if ((typeof (noInspectionLoad) === 'undefined') || (noInspectionLoad === false)) {\n                this.dataProvider.getInspections(unit).then(function (inspections) {\n                    if ((inspections.length) && (inspections.length > 0)) {\n                        // The template code should block rendering by waiting for data inside the appropriate structures\n                        _this.dataProvider.getTemplateById(inspections[0].templateID);\n                        _this.dataProvider.getVisitData(inspections[0]);\n                    }\n                });\n            }\n        }\n    };\n    ReportListPage.prototype.showReportPage = function () {\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_3__propertyreporting_propertyreporting__[\"a\" /* propertyReporting */], {}, { animate: true, direction: 'backward' });\n    };\n    ReportListPage.prototype.showReportCreatorPage = function () {\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_2__reportcreator_reportcreator__[\"a\" /* ReportCreatorPage */], { unit: this.unit, ownerReport: this.ownerReport }, { animate: true, direction: 'forward' });\n    };\n    ReportListPage.prototype.openPopover = function (myEvent) {\n        var popover = this.popoverCtrl.create(__WEBPACK_IMPORTED_MODULE_4__popoverinsdate_popoverinsdate__[\"a\" /* PopoverinsdatePage */]);\n        popover.present({\n            ev: myEvent\n        });\n    };\n    ReportListPage.prototype.toggleItemDetails = function (itemID) {\n        if (this.isItemDetailShown(itemID)) {\n            this.shownItemDetails = '';\n        }\n        else {\n            this.shownItemDetails = itemID;\n        }\n        this.cdRef.detectChanges();\n    };\n    ;\n    ReportListPage.prototype.isItemDetailShown = function (itemID) {\n        return this.shownItemDetails === itemID;\n    };\n    ;\n    ReportListPage.prototype.showIssuesPage = function () {\n        // Comment out until Issues page is connected to real data\n        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_5__issuetypes_issuetypes__[\"a\" /* Issuetypes */], {\n            unit: this.unit\n        });\n    };\n    ReportListPage.prototype.toggleItemFlag = function (roomID, itemID, itemName, addFlag) {\n        if (!this.dataProvider.currentUnsavedItemData) {\n            this.dataProvider.currentUnsavedItemData = {};\n        }\n        if (addFlag) {\n            console.log('added flag to structures');\n            this.dataProvider.issueStructure._flagsList.push(itemID);\n            this.dataProvider.roomStructure[roomID].data.flagsList.push(itemName);\n        }\n        else {\n            console.log('removing flag from structures');\n            this.dataProvider.issueStructure._flagsList.splice(this.dataProvider.issueStructure._flagsList.indexOf(itemID), 1);\n            this.dataProvider.roomStructure[roomID].data.flagsList.push(this.dataProvider.roomStructure[roomID].data.flagsList.indexOf(itemName), 1);\n        }\n        this.dataProvider.inspectionData.data[roomID].data[itemID].reportFlag = !this.dataProvider.inspectionData.data[roomID].data[itemID].reportFlag;\n        this.dataProvider.currentUnsavedItemData.reportFlag = this.dataProvider.inspectionData.data[roomID].data[itemID].reportFlag;\n        this.dataProvider.saveCurrentUnsavedItemData(this.auth.currentUser.username, [roomID], itemID);\n        this.invokeSavePopup(itemName + ' was saved in ' + roomID);\n    };\n    ReportListPage.prototype.invokeSavePopup = function (message) {\n        var toast = this.toast.create({\n            message: message,\n            duration: 3000,\n            position: 'top',\n        });\n        toast.present();\n    };\n    return ReportListPage;\n}());\nReportListPage = __decorate([\n    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n        selector: 'page-reportlist',template:/*ion-inline-start:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/reportlist/reportlist.html\"*/'<ion-header>\\n  <ion-navbar align-title=\"center\">\\n    <button ion-button menuToggle>\\n      <ion-icon name=\"menu\"></ion-icon>\\n    </button>\\n    <ion-title><img src=\"assets/img/mymarsi-logo-large.png\" alt=\"MyMARSI logo\" class=\"logo-mobile\"></ion-title>\\n  </ion-navbar>\\n</ion-header>\\n\\n<ion-content padding class=\"main \">\\n  <ion-grid *ngIf=\"(dataProvider.inspectionTemplate.roomOrder)&&(dataProvider.inspectionTemplate.data)&&(dataProvider.hospitalityStructure.chartColors)\">\\n    <ion-row class=\"page-nav  \">\\n      <ion-col col-6>\\n\\n          <a (click)=\"showReportPage()\" class=\"clickable-element\">\\n\\n        <h2 class=\"page-header\">{{unit.name}}</h2>\\n        <p class=\"negative-margin\"><ion-icon name=\"arrow-back\"></ion-icon> Change unit</p>\\n      </a>\\n      </ion-col>\\n      <ion-col col-6 class=\"cta\">\\n        <button ion-button color=\"secondary\" (click)=\"showReportCreatorPage()\">\\n          <span *ngIf=\"!ownerReport\">Create Report</span>\\n          <span *ngIf=\"ownerReport\">Continue Report</span>\\n        </button>\\n      </ion-col>\\n\\n    </ion-row>\\n    <ion-row class=\"reporting-header\">\\n      <ion-col col-12 col-md-2 class=\"donut-side\">\\n        <ion-row *ngIf=\"dataProvider.hospitalityStructure.count > 0\">\\n          <canvas baseChart [data]=\"[(dataProvider.hospitalityStructure.sum / dataProvider.hospitalityStructure.count),(10- (dataProvider.hospitalityStructure.sum / dataProvider.hospitalityStructure.count))]\"\\n            [chartType]=\"\\'doughnut\\'\" [colors]=\"dataProvider.hospitalityStructure.chartColors\" [options]=\"topDoughnutChart.options\"></canvas>\\n          <div class=\"inside-donut\">\\n            <h2>\\n                {{dataProvider.hospitalityStructure.intPortion}}<span class=\"decimals\">{{dataProvider.hospitalityStructure.remainderPortion}}</span>\\n                <span class=\"label\">Hospitality</span>\\n              </h2>\\n          </div>\\n        </ion-row>\\n      </ion-col >\\n      <ion-col (click)=\"showIssuesPage();\" class=\"clickable-element\"\\n               col-12 offset-md-1 col-md-6 >\\n        <ion-row class=\"large-number\">\\n          <ion-col>\\n            <div class=\"inspection-numbers\">\\n              <h3>{{ dataProvider.issueStructure._itemsInspectedCount }}<span class=\"label\">Items Inspected</span></h3>\\n            </div>\\n          </ion-col>\\n          <ion-col>\\n            <div class=\"inspection-numbers\">\\n              <h3>{{ dataProvider.issueStructure._flagsList.length }}<span class=\"label\">Items Flagged</span></h3>\\n            </div>\\n          </ion-col>\\n          <ion-col>\\n            <h3>{{ dataProvider.issueStructure._total }}<span class=\"label\">Issues</span></h3>\\n          </ion-col>\\n        </ion-row>\\n\\n        <ion-row>\\n        <ion-col *ngFor=\"let issueID of dataProvider.issueStructure[\\'_keys\\']\">\\n          <h3 class=\"number\">\\n                  {{ dataProvider.issueStructure[issueID].count }}<span class=\"label\">{{issueID}}</span>\\n                </h3>\\n          <span class=\"timeline label\">{{ dataProvider.issueStructure[issueID].timelineText }}</span>\\n        </ion-col>\\n      </ion-row>\\n    </ion-col>\\n        <ion-col col-12 col-md-2 offset-md-1>\\n\\n          <p class=\"word-cloud\">\\n            <span *ngFor=\"let tagName of dataProvider.issueStructure._tagHighestArray; let i=index\" [style.font-size]=\"((dataProvider.issueStructure._tagHighestArray.length - i)/2 + 1)+\\'em\\'\">\\n              {{tagName}}\\n              <br/>\\n            </span>\\n          </p>\\n\\n      </ion-col>\\n    </ion-row>\\n\\n    <ng-container *ngFor=\"let roomID of dataProvider.inspectionTemplate.roomOrder\">\\n      <ion-list class=\"gray-background\"\\n                *ngIf=\"dataProvider.roomStructure[roomID] && dataProvider.roomStructure[roomID].data && dataProvider.roomStructure[roomID].data.itemList && dataProvider.roomStructure[roomID].data.completedItemCount\">\\n        <ion-row>\\n          <ion-col>\\n            <ion-row>\\n              <h2>\\n                <span *ngIf=\"dataProvider.inspectionTemplate.roomAliases && dataProvider.inspectionTemplate.roomAliases[roomID]\">\\n                  {{dataProvider.inspectionTemplate.roomAliases[roomID]}}\\n                </span>\\n                <span *ngIf=\"!dataProvider.inspectionTemplate.roomAliases || !dataProvider.inspectionTemplate.roomAliases[roomID]\">\\n                  {{roomID}}\\n                </span>\\n              </h2>\\n            </ion-row>\\n            <ion-row>\\n              <ion-col col-12 col-md-2 class=\"donut-side\" >\\n                <ion-row *ngIf=\"dataProvider.roomStructure[roomID].data.hospitalityCount > 0\">\\n                  <canvas baseChart [data]=\"[(dataProvider.roomStructure[roomID].data.hospitalitySum / dataProvider.roomStructure[roomID].data.hospitalityCount),(10- (dataProvider.roomStructure[roomID].data.hospitalitySum / dataProvider.roomStructure[roomID].data.hospitalityCount))]\"\\n                    [chartType]=\"\\'doughnut\\'\" [colors]=\"dataProvider.roomStructure[roomID].data.chartColors\" [options]=\"roomDoughnutChart.options\"></canvas>\\n                  <div class=\"inside-donut\">\\n                    <h2>\\n                        {{ dataProvider.roomStructure[roomID].data.hospitalityInt }}<span class=\"decimals\">{{ dataProvider.roomStructure[roomID].data.hospitalityRemainder }}</span>\\n                        <span class=\"label\">Hospitality</span>\\n                      </h2>\\n                  </div>\\n              </ion-row>\\n              <ng-container *ngFor=\"let timelineID of dataProvider.issueStructure[\\'_keys\\']\">\\n                <ion-row *ngIf=\"dataProvider.roomStructure[roomID].data.issueTypeCounts[timelineID]\">\\n                  <h3>{{dataProvider.roomStructure[roomID].data.issueTypeCounts[timelineID]}} <span class=\"label\">{{timelineID}}</span></h3>\\n                </ion-row>\\n              </ng-container>\\n              <ion-row>\\n                <h3>{{dataProvider.roomStructure[roomID].data.commentCount }} <span class=\"label\">Comments</span></h3>\\n                <div class=\"tag-cloud\">\\n                  <p class=\"word-cloud\">\\n                    <span *ngFor=\"let tagName of dataProvider.roomStructure[roomID].data.tagHighestArray; let i=index\" [style.font-size]=\"((dataProvider.roomStructure[roomID].data.tagHighestArray.length - i)/2 + 1)+\\'em\\'\">\\n                        {{tagName}}\\n                        <br/>\\n                      </span>\\n                  </p>\\n                </div>\\n              </ion-row>\\n\\n              </ion-col>\\n              <ion-col col-12 col-md-9 offset-md-1 class=\"room-table\">\\n                <header class=\"flex-row\">\\n                  <div class=\"cell col1\">\\n                  </div>\\n                  <!--TODO cell additional styling needed?-->\\n                  <div class=\"cell col1\">\\n                  </div>\\n                  <div class=\"cell col2\">\\n                  </div>\\n                  <div class=\"cell col3\">\\n                    Rating\\n                  </div>\\n                  <div class=\"cell col4\">\\n                    Priority\\n                  </div>\\n                  <div class=\"cell col5\">\\n                    Comments\\n                  </div>\\n                  <div class=\"cell col6\">\\n                  </div>\\n                </header>\\n                <ng-container *ngFor=\"let itemObj of dataProvider.roomStructure[roomID].data.itemList\">\\n                  <div class=\"flex-row clickable-element\"\\n                       *ngIf=\"itemObj.item.markSectionComplete && !itemObj.item.naChoice\"\\n                       text-wrap\\n                       (click)=\"toggleItemDetails(itemObj._id)\"\\n                       [ngClass]=\"{active: isItemDetailShown(itemObj._id)}\">\\n                    <!--TODO cell additional styling needed?-->\\n                    <div class=\"cell col1\">\\n                      <ion-icon\\n                        name=\"flag\"\\n                        [ngStyle]=\"{\\'color\\':dataProvider.inspectionData.data[roomID].data[itemObj._id][\\'reportFlag\\'] ? \\'red\\' : \\'gray\\' }\"\\n                        (click)=\"toggleItemFlag(roomID, itemObj._id, dataProvider.inspectionTemplate.data[roomID].data[itemObj._id].Item, !dataProvider.inspectionData.data[roomID].data[itemObj._id][\\'reportFlag\\']); $event.stopPropagation()\">\\n                      </ion-icon>\\n                    </div>\\n                    <div class=\"cell col1\">\\n                      <ng-container *ngIf=\"itemObj.item.inspectionWorkTrackingConditions\">\\n                        <ion-icon name=\"ios-alert\"\\n                                  *ngIf=\"dataProvider.issueStructure[\\'_problemKeyDict\\'][itemObj.item.inspectionWorkTrackingConditions.selection]\">\\n                        </ion-icon>\\n                      </ng-container>\\n                    </div>\\n                    <div class=\"cell col2\">\\n                      <!--{{itemObj._id}}-->\\n                      <ng-container *ngIf=\"dataProvider.inspectionTemplate.data[roomID]\">\\n                        <span *ngIf=\"dataProvider.inspectionTemplate.data[roomID].data[itemObj._id]\">\\n                          {{dataProvider.inspectionTemplate.data[roomID].data[itemObj._id].Item}}\\n                        </span>\\n                      </ng-container>\\n                    </div>\\n                    <div class=\"cell col3\">\\n                      {{itemObj.item.hospitalityRating}}\\n                    </div>\\n                    <div class=\"cell col4\">\\n                      <ng-container *ngIf=\"itemObj.item.inspectionWorkTrackingConditions\">\\n                        {{itemObj.item.inspectionWorkTrackingConditions.selection}}\\n                      </ng-container>\\n                    </div>\\n                    <div class=\"cell col5\">\\n                      <ng-container *ngIf=\"!itemObj.item.mergedComments\">\\n                        <span *ngFor=\"let commentKey of itemObj.commentKeys\">\\n                          {{itemObj.item.comments[commentKey].text}}\\n                        </span>\\n                      </ng-container>\\n                      <ng-container *ngIf=\"itemObj.item.mergedComments\">\\n                        {{itemObj.item.mergedComments}}\\n                      </ng-container>\\n                    </div>\\n                    <div class=\"cell col6\">\\n                      <ion-icon color=\"success\" *ngIf=\"itemObj.typeConditionKeys.length > 0\" item-right [name]=\"isItemDetailShown(itemObj._id) ? \\'arrow-dropdown\\' : \\'arrow-dropright\\'\"></ion-icon>\\n                    </div>\\n                    <ion-row class=\"details\" *ngIf=\"isItemDetailShown(itemObj._id)\">\\n\\n                        <!-- Commenting out this full-cell style for now, don\\'t think we will use it -->\\n                        <!--<div class=\"full-cell flex\">\\n                            <p><span class=\"label\">Type</span>Screen, Glass</p>\\n                            <p><span class=\"label\">Finish/Color</span>Black & White metal</p>\\n                            <p><span class=\"label\">Integrity</span>It has none</p>\\n                          </div>-->\\n                        <ng-container *ngFor=\"let conditionObj of itemObj.typeConditionKeys\">\\n                          <ion-col col-12 col-md-6 *ngIf=\"conditionObj.optionKeys && conditionObj.optionKeys.length\">\\n                            <p><strong>{{conditionObj._id}}</strong></p>\\n                            <ng-container *ngFor=\"let optionKey of conditionObj.optionKeys\">\\n                              <p *ngIf=\"itemObj.item.typesConditions[conditionObj._id][optionKey].checkboxValue || itemObj.item.typesConditions[conditionObj._id][optionKey].textValue\">\\n                                <span class=\"label\">{{ dataProvider.getOptionTemplateFromID(conditionObj._id, optionKey)?.subLabel }}</span> {{ dataProvider.getOptionTemplateFromID(conditionObj._id, optionKey)?.optionName }}\\n                                <span *ngIf=\"itemObj.item.typesConditions[conditionObj._id][optionKey].textValue\">\\n                                  : {{ itemObj.item.typesConditions[conditionObj._id][optionKey].textValue }}\\n                                </span>\\n                              </p>\\n                            </ng-container>\\n                          </ion-col>\\n                        </ng-container>\\n\\n                        <ng-container *ngIf=\"itemObj.imageKeys.length > 0\">\\n                          <ng-container *ngFor=\"let imageID of itemObj.imageKeys\">\\n                            <ion-col col-12 col-md-6\\n                                     *ngIf=\"itemObj.item.images[imageID] && itemObj.item.images[imageID].thumb400 && itemObj.item.images[imageID].thumb800\">\\n                              <p>\\n                                <img width=\"100%\" height=\"auto\" [src]=\"itemObj.item.images[imageID].thumb400\" />\\n                              </p>\\n                            </ion-col>\\n                          </ng-container>\\n                        </ng-container>\\n                    </ion-row>\\n                  </div>\\n                </ng-container>\\n              </ion-col>\\n            </ion-row>\\n          </ion-col>\\n        </ion-row>\\n      </ion-list>\\n    </ng-container>\\n\\n  </ion-grid>\\n  <span *ngIf=\"!((dataProvider.inspectionTemplate.roomOrder)&&(dataProvider.inspectionTemplate.data)&&(dataProvider.hospitalityStructure.chartColors))\" class=\"content-max-width header-padding\">\\n      <ion-spinner></ion-spinner>\\n    </span>\\n</ion-content>\\n'/*ion-inline-end:\"/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/reportlist/reportlist.html\"*/\n    }),\n    __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"h\" /* NavController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"k\" /* PopoverController */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"i\" /* NavParams */], __WEBPACK_IMPORTED_MODULE_6__providers_data__[\"a\" /* Data */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ChangeDetectorRef\"], __WEBPACK_IMPORTED_MODULE_7__providers_auth_service__[\"a\" /* AuthService */], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__[\"m\" /* ToastController */]])\n], ReportListPage);\n\n//# sourceMappingURL=reportlist.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/reportlist/reportlist.ts\n// module id = 71\n// module chunks = 0\n\n//# sourceURL=/Users/david/sites/__kimscott/__marsi/__ionic2/sara-marsi-ionic2/src/pages/reportlist/reportlist.ts");

/***/ })

},[381]);